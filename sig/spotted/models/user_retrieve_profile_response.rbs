module Spotted
  module Models
    type user_retrieve_profile_response =
      {
        id: String,
        display_name: String?,
        external_urls: Spotted::Models::UserRetrieveProfileResponse::ExternalURLs,
        followers: Spotted::Models::UserRetrieveProfileResponse::Followers,
        href: String,
        images: ::Array[Spotted::Models::UserRetrieveProfileResponse::Image],
        type: Spotted::Models::UserRetrieveProfileResponse::type_,
        uri: String
      }

    class UserRetrieveProfileResponse < Spotted::Internal::Type::BaseModel
      attr_reader id: String?

      def id=: (String) -> String

      attr_accessor display_name: String?

      attr_reader external_urls: Spotted::Models::UserRetrieveProfileResponse::ExternalURLs?

      def external_urls=: (
        Spotted::Models::UserRetrieveProfileResponse::ExternalURLs
      ) -> Spotted::Models::UserRetrieveProfileResponse::ExternalURLs

      attr_reader followers: Spotted::Models::UserRetrieveProfileResponse::Followers?

      def followers=: (
        Spotted::Models::UserRetrieveProfileResponse::Followers
      ) -> Spotted::Models::UserRetrieveProfileResponse::Followers

      attr_reader href: String?

      def href=: (String) -> String

      attr_reader images: ::Array[Spotted::Models::UserRetrieveProfileResponse::Image]?

      def images=: (
        ::Array[Spotted::Models::UserRetrieveProfileResponse::Image]
      ) -> ::Array[Spotted::Models::UserRetrieveProfileResponse::Image]

      attr_reader type: Spotted::Models::UserRetrieveProfileResponse::type_?

      def type=: (
        Spotted::Models::UserRetrieveProfileResponse::type_
      ) -> Spotted::Models::UserRetrieveProfileResponse::type_

      attr_reader uri: String?

      def uri=: (String) -> String

      def initialize: (
        ?id: String,
        ?display_name: String?,
        ?external_urls: Spotted::Models::UserRetrieveProfileResponse::ExternalURLs,
        ?followers: Spotted::Models::UserRetrieveProfileResponse::Followers,
        ?href: String,
        ?images: ::Array[Spotted::Models::UserRetrieveProfileResponse::Image],
        ?type: Spotted::Models::UserRetrieveProfileResponse::type_,
        ?uri: String
      ) -> void

      def to_hash: -> {
        id: String,
        display_name: String?,
        external_urls: Spotted::Models::UserRetrieveProfileResponse::ExternalURLs,
        followers: Spotted::Models::UserRetrieveProfileResponse::Followers,
        href: String,
        images: ::Array[Spotted::Models::UserRetrieveProfileResponse::Image],
        type: Spotted::Models::UserRetrieveProfileResponse::type_,
        uri: String
      }

      type external_urls = { spotify: String }

      class ExternalURLs < Spotted::Internal::Type::BaseModel
        attr_reader spotify: String?

        def spotify=: (String) -> String

        def initialize: (?spotify: String) -> void

        def to_hash: -> { spotify: String }
      end

      type followers = { href: String?, total: Integer }

      class Followers < Spotted::Internal::Type::BaseModel
        attr_accessor href: String?

        attr_reader total: Integer?

        def total=: (Integer) -> Integer

        def initialize: (?href: String?, ?total: Integer) -> void

        def to_hash: -> { href: String?, total: Integer }
      end

      type image = { height: Integer?, url: String, width: Integer? }

      class Image < Spotted::Internal::Type::BaseModel
        attr_accessor height: Integer?

        attr_accessor url: String

        attr_accessor width: Integer?

        def initialize: (height: Integer?, url: String, width: Integer?) -> void

        def to_hash: -> { height: Integer?, url: String, width: Integer? }
      end

      type type_ = :user

      module Type
        extend Spotted::Internal::Type::Enum

        USER: :user

        def self?.values: -> ::Array[Spotted::Models::UserRetrieveProfileResponse::type_]
      end
    end
  end
end
