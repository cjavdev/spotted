module Spotted
  module Models
    type show_retrieve_response =
      { episodes: Spotted::Models::ShowRetrieveResponse::Episodes }

    class ShowRetrieveResponse < Spotted::Models::ShowBase
      def episodes: -> Spotted::Models::ShowRetrieveResponse::Episodes

      def episodes=: (
        Spotted::Models::ShowRetrieveResponse::Episodes _
      ) -> Spotted::Models::ShowRetrieveResponse::Episodes

      def initialize: (
        episodes: Spotted::Models::ShowRetrieveResponse::Episodes
      ) -> void

      def to_hash: -> {
        episodes: Spotted::Models::ShowRetrieveResponse::Episodes
      }

      type episodes =
        {
          href: String,
          items: ::Array[Spotted::SimplifiedEpisodeObject],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        }

      class Episodes < Spotted::Internal::Type::BaseModel
        attr_accessor href: String

        attr_accessor items: ::Array[Spotted::SimplifiedEpisodeObject]

        attr_accessor limit: Integer

        attr_accessor next_: String?

        attr_accessor offset: Integer

        attr_accessor previous: String?

        attr_accessor total: Integer

        def initialize: (
          href: String,
          items: ::Array[Spotted::SimplifiedEpisodeObject],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        ) -> void

        def to_hash: -> {
          href: String,
          items: ::Array[Spotted::SimplifiedEpisodeObject],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        }
      end
    end
  end
end
