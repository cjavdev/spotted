module Spotted
  module Models
    type album_get_tracks_response =
      {
        href: String,
        items: ::Array[Spotted::Models::AlbumGetTracksResponse::Item],
        limit: Integer,
        next_: String?,
        offset: Integer,
        previous: String?,
        total: Integer
      }

    class AlbumGetTracksResponse < Spotted::Internal::Type::BaseModel
      attr_accessor href: String

      attr_accessor items: ::Array[Spotted::Models::AlbumGetTracksResponse::Item]

      attr_accessor limit: Integer

      attr_accessor next_: String?

      attr_accessor offset: Integer

      attr_accessor previous: String?

      attr_accessor total: Integer

      def initialize: (
        href: String,
        items: ::Array[Spotted::Models::AlbumGetTracksResponse::Item],
        limit: Integer,
        next_: String?,
        offset: Integer,
        previous: String?,
        total: Integer
      ) -> void

      def to_hash: -> {
        href: String,
        items: ::Array[Spotted::Models::AlbumGetTracksResponse::Item],
        limit: Integer,
        next_: String?,
        offset: Integer,
        previous: String?,
        total: Integer
      }

      type item =
        {
          id: String,
          artists: ::Array[Spotted::Models::AlbumGetTracksResponse::Item::Artist],
          available_markets: ::Array[String],
          disc_number: Integer,
          duration_ms: Integer,
          explicit: bool,
          external_urls: Spotted::Models::AlbumGetTracksResponse::Item::ExternalURLs,
          href: String,
          is_local: bool,
          is_playable: bool,
          linked_from: Spotted::Models::AlbumGetTracksResponse::Item::LinkedFrom,
          name: String,
          preview_url: String?,
          restrictions: Spotted::Models::AlbumGetTracksResponse::Item::Restrictions,
          track_number: Integer,
          type: String,
          uri: String
        }

      class Item < Spotted::Internal::Type::BaseModel
        attr_reader id: String?

        def id=: (String) -> String

        attr_reader artists: ::Array[Spotted::Models::AlbumGetTracksResponse::Item::Artist]?

        def artists=: (
          ::Array[Spotted::Models::AlbumGetTracksResponse::Item::Artist]
        ) -> ::Array[Spotted::Models::AlbumGetTracksResponse::Item::Artist]

        attr_reader available_markets: ::Array[String]?

        def available_markets=: (::Array[String]) -> ::Array[String]

        attr_reader disc_number: Integer?

        def disc_number=: (Integer) -> Integer

        attr_reader duration_ms: Integer?

        def duration_ms=: (Integer) -> Integer

        attr_reader explicit: bool?

        def explicit=: (bool) -> bool

        attr_reader external_urls: Spotted::Models::AlbumGetTracksResponse::Item::ExternalURLs?

        def external_urls=: (
          Spotted::Models::AlbumGetTracksResponse::Item::ExternalURLs
        ) -> Spotted::Models::AlbumGetTracksResponse::Item::ExternalURLs

        attr_reader href: String?

        def href=: (String) -> String

        attr_reader is_local: bool?

        def is_local=: (bool) -> bool

        attr_reader is_playable: bool?

        def is_playable=: (bool) -> bool

        attr_reader linked_from: Spotted::Models::AlbumGetTracksResponse::Item::LinkedFrom?

        def linked_from=: (
          Spotted::Models::AlbumGetTracksResponse::Item::LinkedFrom
        ) -> Spotted::Models::AlbumGetTracksResponse::Item::LinkedFrom

        attr_reader name: String?

        def name=: (String) -> String

        attr_accessor preview_url: String?

        attr_reader restrictions: Spotted::Models::AlbumGetTracksResponse::Item::Restrictions?

        def restrictions=: (
          Spotted::Models::AlbumGetTracksResponse::Item::Restrictions
        ) -> Spotted::Models::AlbumGetTracksResponse::Item::Restrictions

        attr_reader track_number: Integer?

        def track_number=: (Integer) -> Integer

        attr_reader type: String?

        def type=: (String) -> String

        attr_reader uri: String?

        def uri=: (String) -> String

        def initialize: (
          ?id: String,
          ?artists: ::Array[Spotted::Models::AlbumGetTracksResponse::Item::Artist],
          ?available_markets: ::Array[String],
          ?disc_number: Integer,
          ?duration_ms: Integer,
          ?explicit: bool,
          ?external_urls: Spotted::Models::AlbumGetTracksResponse::Item::ExternalURLs,
          ?href: String,
          ?is_local: bool,
          ?is_playable: bool,
          ?linked_from: Spotted::Models::AlbumGetTracksResponse::Item::LinkedFrom,
          ?name: String,
          ?preview_url: String?,
          ?restrictions: Spotted::Models::AlbumGetTracksResponse::Item::Restrictions,
          ?track_number: Integer,
          ?type: String,
          ?uri: String
        ) -> void

        def to_hash: -> {
          id: String,
          artists: ::Array[Spotted::Models::AlbumGetTracksResponse::Item::Artist],
          available_markets: ::Array[String],
          disc_number: Integer,
          duration_ms: Integer,
          explicit: bool,
          external_urls: Spotted::Models::AlbumGetTracksResponse::Item::ExternalURLs,
          href: String,
          is_local: bool,
          is_playable: bool,
          linked_from: Spotted::Models::AlbumGetTracksResponse::Item::LinkedFrom,
          name: String,
          preview_url: String?,
          restrictions: Spotted::Models::AlbumGetTracksResponse::Item::Restrictions,
          track_number: Integer,
          type: String,
          uri: String
        }

        type artist =
          {
            id: String,
            external_urls: Spotted::Models::AlbumGetTracksResponse::Item::Artist::ExternalURLs,
            href: String,
            name: String,
            type: Spotted::Models::AlbumGetTracksResponse::Item::Artist::type_,
            uri: String
          }

        class Artist < Spotted::Internal::Type::BaseModel
          attr_reader id: String?

          def id=: (String) -> String

          attr_reader external_urls: Spotted::Models::AlbumGetTracksResponse::Item::Artist::ExternalURLs?

          def external_urls=: (
            Spotted::Models::AlbumGetTracksResponse::Item::Artist::ExternalURLs
          ) -> Spotted::Models::AlbumGetTracksResponse::Item::Artist::ExternalURLs

          attr_reader href: String?

          def href=: (String) -> String

          attr_reader name: String?

          def name=: (String) -> String

          attr_reader type: Spotted::Models::AlbumGetTracksResponse::Item::Artist::type_?

          def type=: (
            Spotted::Models::AlbumGetTracksResponse::Item::Artist::type_
          ) -> Spotted::Models::AlbumGetTracksResponse::Item::Artist::type_

          attr_reader uri: String?

          def uri=: (String) -> String

          def initialize: (
            ?id: String,
            ?external_urls: Spotted::Models::AlbumGetTracksResponse::Item::Artist::ExternalURLs,
            ?href: String,
            ?name: String,
            ?type: Spotted::Models::AlbumGetTracksResponse::Item::Artist::type_,
            ?uri: String
          ) -> void

          def to_hash: -> {
            id: String,
            external_urls: Spotted::Models::AlbumGetTracksResponse::Item::Artist::ExternalURLs,
            href: String,
            name: String,
            type: Spotted::Models::AlbumGetTracksResponse::Item::Artist::type_,
            uri: String
          }

          type external_urls = { spotify: String }

          class ExternalURLs < Spotted::Internal::Type::BaseModel
            attr_reader spotify: String?

            def spotify=: (String) -> String

            def initialize: (?spotify: String) -> void

            def to_hash: -> { spotify: String }
          end

          type type_ = :artist

          module Type
            extend Spotted::Internal::Type::Enum

            ARTIST: :artist

            def self?.values: -> ::Array[Spotted::Models::AlbumGetTracksResponse::Item::Artist::type_]
          end
        end

        type external_urls = { spotify: String }

        class ExternalURLs < Spotted::Internal::Type::BaseModel
          attr_reader spotify: String?

          def spotify=: (String) -> String

          def initialize: (?spotify: String) -> void

          def to_hash: -> { spotify: String }
        end

        type linked_from =
          {
            id: String,
            external_urls: Spotted::Models::AlbumGetTracksResponse::Item::LinkedFrom::ExternalURLs,
            href: String,
            type: String,
            uri: String
          }

        class LinkedFrom < Spotted::Internal::Type::BaseModel
          attr_reader id: String?

          def id=: (String) -> String

          attr_reader external_urls: Spotted::Models::AlbumGetTracksResponse::Item::LinkedFrom::ExternalURLs?

          def external_urls=: (
            Spotted::Models::AlbumGetTracksResponse::Item::LinkedFrom::ExternalURLs
          ) -> Spotted::Models::AlbumGetTracksResponse::Item::LinkedFrom::ExternalURLs

          attr_reader href: String?

          def href=: (String) -> String

          attr_reader type: String?

          def type=: (String) -> String

          attr_reader uri: String?

          def uri=: (String) -> String

          def initialize: (
            ?id: String,
            ?external_urls: Spotted::Models::AlbumGetTracksResponse::Item::LinkedFrom::ExternalURLs,
            ?href: String,
            ?type: String,
            ?uri: String
          ) -> void

          def to_hash: -> {
            id: String,
            external_urls: Spotted::Models::AlbumGetTracksResponse::Item::LinkedFrom::ExternalURLs,
            href: String,
            type: String,
            uri: String
          }

          type external_urls = { spotify: String }

          class ExternalURLs < Spotted::Internal::Type::BaseModel
            attr_reader spotify: String?

            def spotify=: (String) -> String

            def initialize: (?spotify: String) -> void

            def to_hash: -> { spotify: String }
          end
        end

        type restrictions = { reason: String }

        class Restrictions < Spotted::Internal::Type::BaseModel
          attr_reader reason: String?

          def reason=: (String) -> String

          def initialize: (?reason: String) -> void

          def to_hash: -> { reason: String }
        end
      end
    end
  end
end
