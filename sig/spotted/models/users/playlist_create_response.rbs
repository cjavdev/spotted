module Spotted
  module Models
    module Users
      type playlist_create_response =
        {
          id: String,
          collaborative: bool,
          description: String?,
          external_urls: Spotted::ExternalURLObject,
          followers: Spotted::FollowersObject,
          href: String,
          images: ::Array[Spotted::ImageObject],
          name: String,
          owner: Spotted::Models::Users::PlaylistCreateResponse::Owner,
          public: bool,
          snapshot_id: String,
          tracks: Spotted::Models::Users::PlaylistCreateResponse::Tracks,
          type: String,
          uri: String
        }

      class PlaylistCreateResponse < Spotted::Internal::Type::BaseModel
        attr_reader id: String?

        def id=: (String) -> String

        attr_reader collaborative: bool?

        def collaborative=: (bool) -> bool

        attr_accessor description: String?

        attr_reader external_urls: Spotted::ExternalURLObject?

        def external_urls=: (
          Spotted::ExternalURLObject
        ) -> Spotted::ExternalURLObject

        attr_reader followers: Spotted::FollowersObject?

        def followers=: (Spotted::FollowersObject) -> Spotted::FollowersObject

        attr_reader href: String?

        def href=: (String) -> String

        attr_reader images: ::Array[Spotted::ImageObject]?

        def images=: (
          ::Array[Spotted::ImageObject]
        ) -> ::Array[Spotted::ImageObject]

        attr_reader name: String?

        def name=: (String) -> String

        attr_reader owner: Spotted::Models::Users::PlaylistCreateResponse::Owner?

        def owner=: (
          Spotted::Models::Users::PlaylistCreateResponse::Owner
        ) -> Spotted::Models::Users::PlaylistCreateResponse::Owner

        attr_reader public: bool?

        def public=: (bool) -> bool

        attr_reader snapshot_id: String?

        def snapshot_id=: (String) -> String

        attr_reader tracks: Spotted::Models::Users::PlaylistCreateResponse::Tracks?

        def tracks=: (
          Spotted::Models::Users::PlaylistCreateResponse::Tracks
        ) -> Spotted::Models::Users::PlaylistCreateResponse::Tracks

        attr_reader type: String?

        def type=: (String) -> String

        attr_reader uri: String?

        def uri=: (String) -> String

        def initialize: (
          ?id: String,
          ?collaborative: bool,
          ?description: String?,
          ?external_urls: Spotted::ExternalURLObject,
          ?followers: Spotted::FollowersObject,
          ?href: String,
          ?images: ::Array[Spotted::ImageObject],
          ?name: String,
          ?owner: Spotted::Models::Users::PlaylistCreateResponse::Owner,
          ?public: bool,
          ?snapshot_id: String,
          ?tracks: Spotted::Models::Users::PlaylistCreateResponse::Tracks,
          ?type: String,
          ?uri: String
        ) -> void

        def to_hash: -> {
          id: String,
          collaborative: bool,
          description: String?,
          external_urls: Spotted::ExternalURLObject,
          followers: Spotted::FollowersObject,
          href: String,
          images: ::Array[Spotted::ImageObject],
          name: String,
          owner: Spotted::Models::Users::PlaylistCreateResponse::Owner,
          public: bool,
          snapshot_id: String,
          tracks: Spotted::Models::Users::PlaylistCreateResponse::Tracks,
          type: String,
          uri: String
        }

        type owner = { display_name: String? }

        class Owner < Spotted::Models::PlaylistUserObject
          def display_name: -> String?

          def display_name=: (String? _) -> String?

          def initialize: (?display_name: String?) -> void

          def to_hash: -> { display_name: String? }
        end

        type tracks =
          {
            href: String,
            items: ::Array[Spotted::PlaylistTrackObject],
            limit: Integer,
            next_: String?,
            offset: Integer,
            previous: String?,
            total: Integer
          }

        class Tracks < Spotted::Internal::Type::BaseModel
          attr_accessor href: String

          attr_accessor items: ::Array[Spotted::PlaylistTrackObject]

          attr_accessor limit: Integer

          attr_accessor next_: String?

          attr_accessor offset: Integer

          attr_accessor previous: String?

          attr_accessor total: Integer

          def initialize: (
            href: String,
            items: ::Array[Spotted::PlaylistTrackObject],
            limit: Integer,
            next_: String?,
            offset: Integer,
            previous: String?,
            total: Integer
          ) -> void

          def to_hash: -> {
            href: String,
            items: ::Array[Spotted::PlaylistTrackObject],
            limit: Integer,
            next_: String?,
            offset: Integer,
            previous: String?,
            total: Integer
          }
        end
      end
    end
  end
end
