module Spotted
  module Models
    type search_retrieve_response =
      {
        albums: Spotted::Models::SearchRetrieveResponse::Albums,
        artists: Spotted::Models::SearchRetrieveResponse::Artists,
        audiobooks: Spotted::Models::SearchRetrieveResponse::Audiobooks,
        episodes: Spotted::Models::SearchRetrieveResponse::Episodes,
        playlists: Spotted::PagingPlaylistObject,
        shows: Spotted::Models::SearchRetrieveResponse::Shows,
        tracks: Spotted::Models::SearchRetrieveResponse::Tracks
      }

    class SearchRetrieveResponse < Spotted::Internal::Type::BaseModel
      attr_reader albums: Spotted::Models::SearchRetrieveResponse::Albums?

      def albums=: (
        Spotted::Models::SearchRetrieveResponse::Albums
      ) -> Spotted::Models::SearchRetrieveResponse::Albums

      attr_reader artists: Spotted::Models::SearchRetrieveResponse::Artists?

      def artists=: (
        Spotted::Models::SearchRetrieveResponse::Artists
      ) -> Spotted::Models::SearchRetrieveResponse::Artists

      attr_reader audiobooks: Spotted::Models::SearchRetrieveResponse::Audiobooks?

      def audiobooks=: (
        Spotted::Models::SearchRetrieveResponse::Audiobooks
      ) -> Spotted::Models::SearchRetrieveResponse::Audiobooks

      attr_reader episodes: Spotted::Models::SearchRetrieveResponse::Episodes?

      def episodes=: (
        Spotted::Models::SearchRetrieveResponse::Episodes
      ) -> Spotted::Models::SearchRetrieveResponse::Episodes

      attr_reader playlists: Spotted::PagingPlaylistObject?

      def playlists=: (
        Spotted::PagingPlaylistObject
      ) -> Spotted::PagingPlaylistObject

      attr_reader shows: Spotted::Models::SearchRetrieveResponse::Shows?

      def shows=: (
        Spotted::Models::SearchRetrieveResponse::Shows
      ) -> Spotted::Models::SearchRetrieveResponse::Shows

      attr_reader tracks: Spotted::Models::SearchRetrieveResponse::Tracks?

      def tracks=: (
        Spotted::Models::SearchRetrieveResponse::Tracks
      ) -> Spotted::Models::SearchRetrieveResponse::Tracks

      def initialize: (
        ?albums: Spotted::Models::SearchRetrieveResponse::Albums,
        ?artists: Spotted::Models::SearchRetrieveResponse::Artists,
        ?audiobooks: Spotted::Models::SearchRetrieveResponse::Audiobooks,
        ?episodes: Spotted::Models::SearchRetrieveResponse::Episodes,
        ?playlists: Spotted::PagingPlaylistObject,
        ?shows: Spotted::Models::SearchRetrieveResponse::Shows,
        ?tracks: Spotted::Models::SearchRetrieveResponse::Tracks
      ) -> void

      def to_hash: -> {
        albums: Spotted::Models::SearchRetrieveResponse::Albums,
        artists: Spotted::Models::SearchRetrieveResponse::Artists,
        audiobooks: Spotted::Models::SearchRetrieveResponse::Audiobooks,
        episodes: Spotted::Models::SearchRetrieveResponse::Episodes,
        playlists: Spotted::PagingPlaylistObject,
        shows: Spotted::Models::SearchRetrieveResponse::Shows,
        tracks: Spotted::Models::SearchRetrieveResponse::Tracks
      }

      type albums =
        {
          href: String,
          items: ::Array[Spotted::Models::SearchRetrieveResponse::Albums::Item],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        }

      class Albums < Spotted::Internal::Type::BaseModel
        attr_accessor href: String

        attr_accessor items: ::Array[Spotted::Models::SearchRetrieveResponse::Albums::Item]

        attr_accessor limit: Integer

        attr_accessor next_: String?

        attr_accessor offset: Integer

        attr_accessor previous: String?

        attr_accessor total: Integer

        def initialize: (
          href: String,
          items: ::Array[Spotted::Models::SearchRetrieveResponse::Albums::Item],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        ) -> void

        def to_hash: -> {
          href: String,
          items: ::Array[Spotted::Models::SearchRetrieveResponse::Albums::Item],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        }

        type item =
          {
            id: String,
            album_type: Spotted::Models::SearchRetrieveResponse::Albums::Item::album_type,
            artists: ::Array[Spotted::SimplifiedArtistObject],
            available_markets: ::Array[String],
            external_urls: Spotted::ExternalURLObject,
            href: String,
            images: ::Array[Spotted::ImageObject],
            name: String,
            release_date: String,
            release_date_precision: Spotted::Models::SearchRetrieveResponse::Albums::Item::release_date_precision,
            total_tracks: Integer,
            type: Spotted::Models::SearchRetrieveResponse::Albums::Item::type_,
            uri: String,
            restrictions: Spotted::AlbumRestrictionObject
          }

        class Item < Spotted::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor album_type: Spotted::Models::SearchRetrieveResponse::Albums::Item::album_type

          attr_accessor artists: ::Array[Spotted::SimplifiedArtistObject]

          attr_accessor available_markets: ::Array[String]

          attr_accessor external_urls: Spotted::ExternalURLObject

          attr_accessor href: String

          attr_accessor images: ::Array[Spotted::ImageObject]

          attr_accessor name: String

          attr_accessor release_date: String

          attr_accessor release_date_precision: Spotted::Models::SearchRetrieveResponse::Albums::Item::release_date_precision

          attr_accessor total_tracks: Integer

          attr_accessor type: Spotted::Models::SearchRetrieveResponse::Albums::Item::type_

          attr_accessor uri: String

          attr_reader restrictions: Spotted::AlbumRestrictionObject?

          def restrictions=: (
            Spotted::AlbumRestrictionObject
          ) -> Spotted::AlbumRestrictionObject

          def initialize: (
            id: String,
            album_type: Spotted::Models::SearchRetrieveResponse::Albums::Item::album_type,
            artists: ::Array[Spotted::SimplifiedArtistObject],
            available_markets: ::Array[String],
            external_urls: Spotted::ExternalURLObject,
            href: String,
            images: ::Array[Spotted::ImageObject],
            name: String,
            release_date: String,
            release_date_precision: Spotted::Models::SearchRetrieveResponse::Albums::Item::release_date_precision,
            total_tracks: Integer,
            type: Spotted::Models::SearchRetrieveResponse::Albums::Item::type_,
            uri: String,
            ?restrictions: Spotted::AlbumRestrictionObject
          ) -> void

          def to_hash: -> {
            id: String,
            album_type: Spotted::Models::SearchRetrieveResponse::Albums::Item::album_type,
            artists: ::Array[Spotted::SimplifiedArtistObject],
            available_markets: ::Array[String],
            external_urls: Spotted::ExternalURLObject,
            href: String,
            images: ::Array[Spotted::ImageObject],
            name: String,
            release_date: String,
            release_date_precision: Spotted::Models::SearchRetrieveResponse::Albums::Item::release_date_precision,
            total_tracks: Integer,
            type: Spotted::Models::SearchRetrieveResponse::Albums::Item::type_,
            uri: String,
            restrictions: Spotted::AlbumRestrictionObject
          }

          type album_type = :album | :single | :compilation

          module AlbumType
            extend Spotted::Internal::Type::Enum

            ALBUM: :album
            SINGLE: :single
            COMPILATION: :compilation

            def self?.values: -> ::Array[Spotted::Models::SearchRetrieveResponse::Albums::Item::album_type]
          end

          type release_date_precision = :year | :month | :day

          module ReleaseDatePrecision
            extend Spotted::Internal::Type::Enum

            YEAR: :year
            MONTH: :month
            DAY: :day

            def self?.values: -> ::Array[Spotted::Models::SearchRetrieveResponse::Albums::Item::release_date_precision]
          end

          type type_ = :album

          module Type
            extend Spotted::Internal::Type::Enum

            ALBUM: :album

            def self?.values: -> ::Array[Spotted::Models::SearchRetrieveResponse::Albums::Item::type_]
          end
        end
      end

      type artists =
        {
          href: String,
          items: ::Array[Spotted::ArtistObject],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        }

      class Artists < Spotted::Internal::Type::BaseModel
        attr_accessor href: String

        attr_accessor items: ::Array[Spotted::ArtistObject]

        attr_accessor limit: Integer

        attr_accessor next_: String?

        attr_accessor offset: Integer

        attr_accessor previous: String?

        attr_accessor total: Integer

        def initialize: (
          href: String,
          items: ::Array[Spotted::ArtistObject],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        ) -> void

        def to_hash: -> {
          href: String,
          items: ::Array[Spotted::ArtistObject],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        }
      end

      type audiobooks =
        {
          href: String,
          items: ::Array[Spotted::AudiobookBase],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        }

      class Audiobooks < Spotted::Internal::Type::BaseModel
        attr_accessor href: String

        attr_accessor items: ::Array[Spotted::AudiobookBase]

        attr_accessor limit: Integer

        attr_accessor next_: String?

        attr_accessor offset: Integer

        attr_accessor previous: String?

        attr_accessor total: Integer

        def initialize: (
          href: String,
          items: ::Array[Spotted::AudiobookBase],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        ) -> void

        def to_hash: -> {
          href: String,
          items: ::Array[Spotted::AudiobookBase],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        }
      end

      type episodes =
        {
          href: String,
          items: ::Array[Spotted::SimplifiedEpisodeObject],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        }

      class Episodes < Spotted::Internal::Type::BaseModel
        attr_accessor href: String

        attr_accessor items: ::Array[Spotted::SimplifiedEpisodeObject]

        attr_accessor limit: Integer

        attr_accessor next_: String?

        attr_accessor offset: Integer

        attr_accessor previous: String?

        attr_accessor total: Integer

        def initialize: (
          href: String,
          items: ::Array[Spotted::SimplifiedEpisodeObject],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        ) -> void

        def to_hash: -> {
          href: String,
          items: ::Array[Spotted::SimplifiedEpisodeObject],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        }
      end

      type shows =
        {
          href: String,
          items: ::Array[Spotted::ShowBase],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        }

      class Shows < Spotted::Internal::Type::BaseModel
        attr_accessor href: String

        attr_accessor items: ::Array[Spotted::ShowBase]

        attr_accessor limit: Integer

        attr_accessor next_: String?

        attr_accessor offset: Integer

        attr_accessor previous: String?

        attr_accessor total: Integer

        def initialize: (
          href: String,
          items: ::Array[Spotted::ShowBase],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        ) -> void

        def to_hash: -> {
          href: String,
          items: ::Array[Spotted::ShowBase],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        }
      end

      type tracks =
        {
          href: String,
          items: ::Array[Spotted::TrackObject],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        }

      class Tracks < Spotted::Internal::Type::BaseModel
        attr_accessor href: String

        attr_accessor items: ::Array[Spotted::TrackObject]

        attr_accessor limit: Integer

        attr_accessor next_: String?

        attr_accessor offset: Integer

        attr_accessor previous: String?

        attr_accessor total: Integer

        def initialize: (
          href: String,
          items: ::Array[Spotted::TrackObject],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        ) -> void

        def to_hash: -> {
          href: String,
          items: ::Array[Spotted::TrackObject],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        }
      end
    end
  end
end
