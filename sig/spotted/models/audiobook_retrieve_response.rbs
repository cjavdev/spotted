module Spotted
  module Models
    type audiobook_retrieve_response =
      {
        id: String,
        authors: ::Array[Spotted::Models::AudiobookRetrieveResponse::Author],
        available_markets: ::Array[String],
        chapters: Spotted::Models::AudiobookRetrieveResponse::Chapters,
        copyrights: ::Array[Spotted::Models::AudiobookRetrieveResponse::Copyright],
        description: String,
        explicit: bool,
        external_urls: Spotted::Models::AudiobookRetrieveResponse::ExternalURLs,
        href: String,
        html_description: String,
        images: ::Array[Spotted::Models::AudiobookRetrieveResponse::Image],
        languages: ::Array[String],
        media_type: String,
        name: String,
        narrators: ::Array[Spotted::Models::AudiobookRetrieveResponse::Narrator],
        publisher: String,
        total_chapters: Integer,
        type: Spotted::Models::AudiobookRetrieveResponse::type_,
        uri: String,
        edition: String
      }

    class AudiobookRetrieveResponse < Spotted::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor authors: ::Array[Spotted::Models::AudiobookRetrieveResponse::Author]

      attr_accessor available_markets: ::Array[String]

      attr_accessor chapters: Spotted::Models::AudiobookRetrieveResponse::Chapters

      attr_accessor copyrights: ::Array[Spotted::Models::AudiobookRetrieveResponse::Copyright]

      attr_accessor description: String

      attr_accessor explicit: bool

      attr_accessor external_urls: Spotted::Models::AudiobookRetrieveResponse::ExternalURLs

      attr_accessor href: String

      attr_accessor html_description: String

      attr_accessor images: ::Array[Spotted::Models::AudiobookRetrieveResponse::Image]

      attr_accessor languages: ::Array[String]

      attr_accessor media_type: String

      attr_accessor name: String

      attr_accessor narrators: ::Array[Spotted::Models::AudiobookRetrieveResponse::Narrator]

      attr_accessor publisher: String

      attr_accessor total_chapters: Integer

      attr_accessor type: Spotted::Models::AudiobookRetrieveResponse::type_

      attr_accessor uri: String

      attr_reader edition: String?

      def edition=: (String) -> String

      def initialize: (
        id: String,
        authors: ::Array[Spotted::Models::AudiobookRetrieveResponse::Author],
        available_markets: ::Array[String],
        chapters: Spotted::Models::AudiobookRetrieveResponse::Chapters,
        copyrights: ::Array[Spotted::Models::AudiobookRetrieveResponse::Copyright],
        description: String,
        explicit: bool,
        external_urls: Spotted::Models::AudiobookRetrieveResponse::ExternalURLs,
        href: String,
        html_description: String,
        images: ::Array[Spotted::Models::AudiobookRetrieveResponse::Image],
        languages: ::Array[String],
        media_type: String,
        name: String,
        narrators: ::Array[Spotted::Models::AudiobookRetrieveResponse::Narrator],
        publisher: String,
        total_chapters: Integer,
        type: Spotted::Models::AudiobookRetrieveResponse::type_,
        uri: String,
        ?edition: String
      ) -> void

      def to_hash: -> {
        id: String,
        authors: ::Array[Spotted::Models::AudiobookRetrieveResponse::Author],
        available_markets: ::Array[String],
        chapters: Spotted::Models::AudiobookRetrieveResponse::Chapters,
        copyrights: ::Array[Spotted::Models::AudiobookRetrieveResponse::Copyright],
        description: String,
        explicit: bool,
        external_urls: Spotted::Models::AudiobookRetrieveResponse::ExternalURLs,
        href: String,
        html_description: String,
        images: ::Array[Spotted::Models::AudiobookRetrieveResponse::Image],
        languages: ::Array[String],
        media_type: String,
        name: String,
        narrators: ::Array[Spotted::Models::AudiobookRetrieveResponse::Narrator],
        publisher: String,
        total_chapters: Integer,
        type: Spotted::Models::AudiobookRetrieveResponse::type_,
        uri: String,
        edition: String
      }

      type author = { name: String }

      class Author < Spotted::Internal::Type::BaseModel
        attr_reader name: String?

        def name=: (String) -> String

        def initialize: (?name: String) -> void

        def to_hash: -> { name: String }
      end

      type chapters =
        {
          href: String,
          items: ::Array[Spotted::Models::AudiobookRetrieveResponse::Chapters::Item],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        }

      class Chapters < Spotted::Internal::Type::BaseModel
        attr_accessor href: String

        attr_accessor items: ::Array[Spotted::Models::AudiobookRetrieveResponse::Chapters::Item]

        attr_accessor limit: Integer

        attr_accessor next_: String?

        attr_accessor offset: Integer

        attr_accessor previous: String?

        attr_accessor total: Integer

        def initialize: (
          href: String,
          items: ::Array[Spotted::Models::AudiobookRetrieveResponse::Chapters::Item],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        ) -> void

        def to_hash: -> {
          href: String,
          items: ::Array[Spotted::Models::AudiobookRetrieveResponse::Chapters::Item],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        }

        type item =
          {
            id: String,
            audio_preview_url: String?,
            chapter_number: Integer,
            description: String,
            duration_ms: Integer,
            explicit: bool,
            external_urls: Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::ExternalURLs,
            href: String,
            html_description: String,
            images: ::Array[Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::Image],
            is_playable: bool,
            languages: ::Array[String],
            name: String,
            release_date: String,
            release_date_precision: Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::release_date_precision,
            type: Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::type_,
            uri: String,
            available_markets: ::Array[String],
            restrictions: Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::Restrictions,
            resume_point: Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::ResumePoint
          }

        class Item < Spotted::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor audio_preview_url: String?

          attr_accessor chapter_number: Integer

          attr_accessor description: String

          attr_accessor duration_ms: Integer

          attr_accessor explicit: bool

          attr_accessor external_urls: Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::ExternalURLs

          attr_accessor href: String

          attr_accessor html_description: String

          attr_accessor images: ::Array[Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::Image]

          attr_accessor is_playable: bool

          attr_accessor languages: ::Array[String]

          attr_accessor name: String

          attr_accessor release_date: String

          attr_accessor release_date_precision: Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::release_date_precision

          attr_accessor type: Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::type_

          attr_accessor uri: String

          attr_reader available_markets: ::Array[String]?

          def available_markets=: (::Array[String]) -> ::Array[String]

          attr_reader restrictions: Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::Restrictions?

          def restrictions=: (
            Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::Restrictions
          ) -> Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::Restrictions

          attr_reader resume_point: Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::ResumePoint?

          def resume_point=: (
            Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::ResumePoint
          ) -> Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::ResumePoint

          def initialize: (
            id: String,
            audio_preview_url: String?,
            chapter_number: Integer,
            description: String,
            duration_ms: Integer,
            explicit: bool,
            external_urls: Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::ExternalURLs,
            href: String,
            html_description: String,
            images: ::Array[Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::Image],
            is_playable: bool,
            languages: ::Array[String],
            name: String,
            release_date: String,
            release_date_precision: Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::release_date_precision,
            type: Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::type_,
            uri: String,
            ?available_markets: ::Array[String],
            ?restrictions: Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::Restrictions,
            ?resume_point: Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::ResumePoint
          ) -> void

          def to_hash: -> {
            id: String,
            audio_preview_url: String?,
            chapter_number: Integer,
            description: String,
            duration_ms: Integer,
            explicit: bool,
            external_urls: Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::ExternalURLs,
            href: String,
            html_description: String,
            images: ::Array[Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::Image],
            is_playable: bool,
            languages: ::Array[String],
            name: String,
            release_date: String,
            release_date_precision: Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::release_date_precision,
            type: Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::type_,
            uri: String,
            available_markets: ::Array[String],
            restrictions: Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::Restrictions,
            resume_point: Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::ResumePoint
          }

          type external_urls = { spotify: String }

          class ExternalURLs < Spotted::Internal::Type::BaseModel
            attr_reader spotify: String?

            def spotify=: (String) -> String

            def initialize: (?spotify: String) -> void

            def to_hash: -> { spotify: String }
          end

          type image = { height: Integer?, url: String, width: Integer? }

          class Image < Spotted::Internal::Type::BaseModel
            attr_accessor height: Integer?

            attr_accessor url: String

            attr_accessor width: Integer?

            def initialize: (
              height: Integer?,
              url: String,
              width: Integer?
            ) -> void

            def to_hash: -> { height: Integer?, url: String, width: Integer? }
          end

          type release_date_precision = :year | :month | :day

          module ReleaseDatePrecision
            extend Spotted::Internal::Type::Enum

            YEAR: :year
            MONTH: :month
            DAY: :day

            def self?.values: -> ::Array[Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::release_date_precision]
          end

          type type_ = :episode

          module Type
            extend Spotted::Internal::Type::Enum

            EPISODE: :episode

            def self?.values: -> ::Array[Spotted::Models::AudiobookRetrieveResponse::Chapters::Item::type_]
          end

          type restrictions = { reason: String }

          class Restrictions < Spotted::Internal::Type::BaseModel
            attr_reader reason: String?

            def reason=: (String) -> String

            def initialize: (?reason: String) -> void

            def to_hash: -> { reason: String }
          end

          type resume_point =
            { fully_played: bool, resume_position_ms: Integer }

          class ResumePoint < Spotted::Internal::Type::BaseModel
            attr_reader fully_played: bool?

            def fully_played=: (bool) -> bool

            attr_reader resume_position_ms: Integer?

            def resume_position_ms=: (Integer) -> Integer

            def initialize: (
              ?fully_played: bool,
              ?resume_position_ms: Integer
            ) -> void

            def to_hash: -> { fully_played: bool, resume_position_ms: Integer }
          end
        end
      end

      type copyright = { text: String, type: String }

      class Copyright < Spotted::Internal::Type::BaseModel
        attr_reader text: String?

        def text=: (String) -> String

        attr_reader type: String?

        def type=: (String) -> String

        def initialize: (?text: String, ?type: String) -> void

        def to_hash: -> { text: String, type: String }
      end

      type external_urls = { spotify: String }

      class ExternalURLs < Spotted::Internal::Type::BaseModel
        attr_reader spotify: String?

        def spotify=: (String) -> String

        def initialize: (?spotify: String) -> void

        def to_hash: -> { spotify: String }
      end

      type image = { height: Integer?, url: String, width: Integer? }

      class Image < Spotted::Internal::Type::BaseModel
        attr_accessor height: Integer?

        attr_accessor url: String

        attr_accessor width: Integer?

        def initialize: (height: Integer?, url: String, width: Integer?) -> void

        def to_hash: -> { height: Integer?, url: String, width: Integer? }
      end

      type narrator = { name: String }

      class Narrator < Spotted::Internal::Type::BaseModel
        attr_reader name: String?

        def name=: (String) -> String

        def initialize: (?name: String) -> void

        def to_hash: -> { name: String }
      end

      type type_ = :audiobook

      module Type
        extend Spotted::Internal::Type::Enum

        AUDIOBOOK: :audiobook

        def self?.values: -> ::Array[Spotted::Models::AudiobookRetrieveResponse::type_]
      end
    end
  end
end
