module Spotted
  module Models
    type audiobook_retrieve_response =
      { chapters: Spotted::Models::AudiobookRetrieveResponse::Chapters }

    class AudiobookRetrieveResponse < Spotted::Models::AudiobookBase
      def chapters: -> Spotted::Models::AudiobookRetrieveResponse::Chapters

      def chapters=: (
        Spotted::Models::AudiobookRetrieveResponse::Chapters _
      ) -> Spotted::Models::AudiobookRetrieveResponse::Chapters

      def initialize: (
        chapters: Spotted::Models::AudiobookRetrieveResponse::Chapters
      ) -> void

      def to_hash: -> {
        chapters: Spotted::Models::AudiobookRetrieveResponse::Chapters
      }

      type chapters =
        {
          href: String,
          items: ::Array[Spotted::SimplifiedChapterObject],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        }

      class Chapters < Spotted::Internal::Type::BaseModel
        attr_accessor href: String

        attr_accessor items: ::Array[Spotted::SimplifiedChapterObject]

        attr_accessor limit: Integer

        attr_accessor next_: String?

        attr_accessor offset: Integer

        attr_accessor previous: String?

        attr_accessor total: Integer

        def initialize: (
          href: String,
          items: ::Array[Spotted::SimplifiedChapterObject],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        ) -> void

        def to_hash: -> {
          href: String,
          items: ::Array[Spotted::SimplifiedChapterObject],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        }
      end
    end
  end
end
