module Spotted
  module Models
    module Me
      type player_get_recently_played_response =
        {
          cursors: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Cursors,
          href: String,
          items: ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item],
          limit: Integer,
          next_: String,
          total: Integer
        }

      class PlayerGetRecentlyPlayedResponse < Spotted::Internal::Type::BaseModel
        attr_reader cursors: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Cursors?

        def cursors=: (
          Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Cursors
        ) -> Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Cursors

        attr_reader href: String?

        def href=: (String) -> String

        attr_reader items: ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item]?

        def items=: (
          ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item]
        ) -> ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item]

        attr_reader limit: Integer?

        def limit=: (Integer) -> Integer

        attr_reader next_: String?

        def next_=: (String) -> String

        attr_reader total: Integer?

        def total=: (Integer) -> Integer

        def initialize: (
          ?cursors: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Cursors,
          ?href: String,
          ?items: ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item],
          ?limit: Integer,
          ?next_: String,
          ?total: Integer
        ) -> void

        def to_hash: -> {
          cursors: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Cursors,
          href: String,
          items: ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item],
          limit: Integer,
          next_: String,
          total: Integer
        }

        type cursors = { after: String, before: String }

        class Cursors < Spotted::Internal::Type::BaseModel
          attr_reader after: String?

          def after=: (String) -> String

          attr_reader before: String?

          def before=: (String) -> String

          def initialize: (?after: String, ?before: String) -> void

          def to_hash: -> { after: String, before: String }
        end

        type item =
          {
            context: Spotted::Me::ContextObject,
            played_at: Time,
            track: Spotted::TrackObject
          }

        class Item < Spotted::Internal::Type::BaseModel
          attr_reader context: Spotted::Me::ContextObject?

          def context=: (
            Spotted::Me::ContextObject
          ) -> Spotted::Me::ContextObject

          attr_reader played_at: Time?

          def played_at=: (Time) -> Time

          attr_reader track: Spotted::TrackObject?

          def track=: (Spotted::TrackObject) -> Spotted::TrackObject

          def initialize: (
            ?context: Spotted::Me::ContextObject,
            ?played_at: Time,
            ?track: Spotted::TrackObject
          ) -> void

          def to_hash: -> {
            context: Spotted::Me::ContextObject,
            played_at: Time,
            track: Spotted::TrackObject
          }
        end
      end
    end
  end
end
