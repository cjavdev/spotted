module Spotted
  module Models
    module Me
      type player_get_recently_played_response =
        {
          cursors: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Cursors,
          href: String,
          items: ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item],
          limit: Integer,
          next_: String,
          total: Integer
        }

      class PlayerGetRecentlyPlayedResponse < Spotted::Internal::Type::BaseModel
        attr_reader cursors: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Cursors?

        def cursors=: (
          Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Cursors
        ) -> Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Cursors

        attr_reader href: String?

        def href=: (String) -> String

        attr_reader items: ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item]?

        def items=: (
          ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item]
        ) -> ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item]

        attr_reader limit: Integer?

        def limit=: (Integer) -> Integer

        attr_reader next_: String?

        def next_=: (String) -> String

        attr_reader total: Integer?

        def total=: (Integer) -> Integer

        def initialize: (
          ?cursors: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Cursors,
          ?href: String,
          ?items: ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item],
          ?limit: Integer,
          ?next_: String,
          ?total: Integer
        ) -> void

        def to_hash: -> {
          cursors: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Cursors,
          href: String,
          items: ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item],
          limit: Integer,
          next_: String,
          total: Integer
        }

        type cursors = { after: String, before: String }

        class Cursors < Spotted::Internal::Type::BaseModel
          attr_reader after: String?

          def after=: (String) -> String

          attr_reader before: String?

          def before=: (String) -> String

          def initialize: (?after: String, ?before: String) -> void

          def to_hash: -> { after: String, before: String }
        end

        type item =
          {
            context: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Context,
            played_at: Time,
            track: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track
          }

        class Item < Spotted::Internal::Type::BaseModel
          attr_reader context: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Context?

          def context=: (
            Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Context
          ) -> Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Context

          attr_reader played_at: Time?

          def played_at=: (Time) -> Time

          attr_reader track: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track?

          def track=: (
            Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track
          ) -> Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track

          def initialize: (
            ?context: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Context,
            ?played_at: Time,
            ?track: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track
          ) -> void

          def to_hash: -> {
            context: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Context,
            played_at: Time,
            track: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track
          }

          type context =
            {
              external_urls: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Context::ExternalURLs,
              href: String,
              type: String,
              uri: String
            }

          class Context < Spotted::Internal::Type::BaseModel
            attr_reader external_urls: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Context::ExternalURLs?

            def external_urls=: (
              Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Context::ExternalURLs
            ) -> Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Context::ExternalURLs

            attr_reader href: String?

            def href=: (String) -> String

            attr_reader type: String?

            def type=: (String) -> String

            attr_reader uri: String?

            def uri=: (String) -> String

            def initialize: (
              ?external_urls: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Context::ExternalURLs,
              ?href: String,
              ?type: String,
              ?uri: String
            ) -> void

            def to_hash: -> {
              external_urls: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Context::ExternalURLs,
              href: String,
              type: String,
              uri: String
            }

            type external_urls = { spotify: String }

            class ExternalURLs < Spotted::Internal::Type::BaseModel
              attr_reader spotify: String?

              def spotify=: (String) -> String

              def initialize: (?spotify: String) -> void

              def to_hash: -> { spotify: String }
            end
          end

          type track =
            {
              id: String,
              album: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album,
              artists: ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Artist],
              available_markets: ::Array[String],
              disc_number: Integer,
              duration_ms: Integer,
              explicit: bool,
              external_ids: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::ExternalIDs,
              external_urls: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::ExternalURLs,
              href: String,
              is_local: bool,
              is_playable: bool,
              linked_from: top,
              name: String,
              popularity: Integer,
              preview_url: String?,
              restrictions: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Restrictions,
              track_number: Integer,
              type: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::type_,
              uri: String
            }

          class Track < Spotted::Internal::Type::BaseModel
            attr_reader id: String?

            def id=: (String) -> String

            attr_reader album: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album?

            def album=: (
              Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album
            ) -> Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album

            attr_reader artists: ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Artist]?

            def artists=: (
              ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Artist]
            ) -> ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Artist]

            attr_reader available_markets: ::Array[String]?

            def available_markets=: (::Array[String]) -> ::Array[String]

            attr_reader disc_number: Integer?

            def disc_number=: (Integer) -> Integer

            attr_reader duration_ms: Integer?

            def duration_ms=: (Integer) -> Integer

            attr_reader explicit: bool?

            def explicit=: (bool) -> bool

            attr_reader external_ids: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::ExternalIDs?

            def external_ids=: (
              Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::ExternalIDs
            ) -> Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::ExternalIDs

            attr_reader external_urls: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::ExternalURLs?

            def external_urls=: (
              Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::ExternalURLs
            ) -> Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::ExternalURLs

            attr_reader href: String?

            def href=: (String) -> String

            attr_reader is_local: bool?

            def is_local=: (bool) -> bool

            attr_reader is_playable: bool?

            def is_playable=: (bool) -> bool

            attr_reader linked_from: top?

            def linked_from=: (top) -> top

            attr_reader name: String?

            def name=: (String) -> String

            attr_reader popularity: Integer?

            def popularity=: (Integer) -> Integer

            attr_accessor preview_url: String?

            attr_reader restrictions: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Restrictions?

            def restrictions=: (
              Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Restrictions
            ) -> Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Restrictions

            attr_reader track_number: Integer?

            def track_number=: (Integer) -> Integer

            attr_reader type: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::type_?

            def type=: (
              Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::type_
            ) -> Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::type_

            attr_reader uri: String?

            def uri=: (String) -> String

            def initialize: (
              ?id: String,
              ?album: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album,
              ?artists: ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Artist],
              ?available_markets: ::Array[String],
              ?disc_number: Integer,
              ?duration_ms: Integer,
              ?explicit: bool,
              ?external_ids: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::ExternalIDs,
              ?external_urls: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::ExternalURLs,
              ?href: String,
              ?is_local: bool,
              ?is_playable: bool,
              ?linked_from: top,
              ?name: String,
              ?popularity: Integer,
              ?preview_url: String?,
              ?restrictions: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Restrictions,
              ?track_number: Integer,
              ?type: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::type_,
              ?uri: String
            ) -> void

            def to_hash: -> {
              id: String,
              album: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album,
              artists: ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Artist],
              available_markets: ::Array[String],
              disc_number: Integer,
              duration_ms: Integer,
              explicit: bool,
              external_ids: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::ExternalIDs,
              external_urls: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::ExternalURLs,
              href: String,
              is_local: bool,
              is_playable: bool,
              linked_from: top,
              name: String,
              popularity: Integer,
              preview_url: String?,
              restrictions: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Restrictions,
              track_number: Integer,
              type: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::type_,
              uri: String
            }

            type album =
              {
                id: String,
                album_type: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::album_type,
                artists: ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Artist],
                available_markets: ::Array[String],
                external_urls: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::ExternalURLs,
                href: String,
                images: ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Image],
                name: String,
                release_date: String,
                release_date_precision: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::release_date_precision,
                total_tracks: Integer,
                type: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::type_,
                uri: String,
                restrictions: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Restrictions
              }

            class Album < Spotted::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor album_type: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::album_type

              attr_accessor artists: ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Artist]

              attr_accessor available_markets: ::Array[String]

              attr_accessor external_urls: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::ExternalURLs

              attr_accessor href: String

              attr_accessor images: ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Image]

              attr_accessor name: String

              attr_accessor release_date: String

              attr_accessor release_date_precision: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::release_date_precision

              attr_accessor total_tracks: Integer

              attr_accessor type: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::type_

              attr_accessor uri: String

              attr_reader restrictions: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Restrictions?

              def restrictions=: (
                Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Restrictions
              ) -> Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Restrictions

              def initialize: (
                id: String,
                album_type: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::album_type,
                artists: ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Artist],
                available_markets: ::Array[String],
                external_urls: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::ExternalURLs,
                href: String,
                images: ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Image],
                name: String,
                release_date: String,
                release_date_precision: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::release_date_precision,
                total_tracks: Integer,
                type: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::type_,
                uri: String,
                ?restrictions: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Restrictions
              ) -> void

              def to_hash: -> {
                id: String,
                album_type: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::album_type,
                artists: ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Artist],
                available_markets: ::Array[String],
                external_urls: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::ExternalURLs,
                href: String,
                images: ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Image],
                name: String,
                release_date: String,
                release_date_precision: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::release_date_precision,
                total_tracks: Integer,
                type: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::type_,
                uri: String,
                restrictions: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Restrictions
              }

              type album_type = :album | :single | :compilation

              module AlbumType
                extend Spotted::Internal::Type::Enum

                ALBUM: :album
                SINGLE: :single
                COMPILATION: :compilation

                def self?.values: -> ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::album_type]
              end

              type artist =
                {
                  id: String,
                  external_urls: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Artist::ExternalURLs,
                  href: String,
                  name: String,
                  type: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Artist::type_,
                  uri: String
                }

              class Artist < Spotted::Internal::Type::BaseModel
                attr_reader id: String?

                def id=: (String) -> String

                attr_reader external_urls: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Artist::ExternalURLs?

                def external_urls=: (
                  Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Artist::ExternalURLs
                ) -> Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Artist::ExternalURLs

                attr_reader href: String?

                def href=: (String) -> String

                attr_reader name: String?

                def name=: (String) -> String

                attr_reader type: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Artist::type_?

                def type=: (
                  Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Artist::type_
                ) -> Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Artist::type_

                attr_reader uri: String?

                def uri=: (String) -> String

                def initialize: (
                  ?id: String,
                  ?external_urls: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Artist::ExternalURLs,
                  ?href: String,
                  ?name: String,
                  ?type: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Artist::type_,
                  ?uri: String
                ) -> void

                def to_hash: -> {
                  id: String,
                  external_urls: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Artist::ExternalURLs,
                  href: String,
                  name: String,
                  type: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Artist::type_,
                  uri: String
                }

                type external_urls = { spotify: String }

                class ExternalURLs < Spotted::Internal::Type::BaseModel
                  attr_reader spotify: String?

                  def spotify=: (String) -> String

                  def initialize: (?spotify: String) -> void

                  def to_hash: -> { spotify: String }
                end

                type type_ = :artist

                module Type
                  extend Spotted::Internal::Type::Enum

                  ARTIST: :artist

                  def self?.values: -> ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Artist::type_]
                end
              end

              type external_urls = { spotify: String }

              class ExternalURLs < Spotted::Internal::Type::BaseModel
                attr_reader spotify: String?

                def spotify=: (String) -> String

                def initialize: (?spotify: String) -> void

                def to_hash: -> { spotify: String }
              end

              type image = { height: Integer?, url: String, width: Integer? }

              class Image < Spotted::Internal::Type::BaseModel
                attr_accessor height: Integer?

                attr_accessor url: String

                attr_accessor width: Integer?

                def initialize: (
                  height: Integer?,
                  url: String,
                  width: Integer?
                ) -> void

                def to_hash: -> {
                  height: Integer?,
                  url: String,
                  width: Integer?
                }
              end

              type release_date_precision = :year | :month | :day

              module ReleaseDatePrecision
                extend Spotted::Internal::Type::Enum

                YEAR: :year
                MONTH: :month
                DAY: :day

                def self?.values: -> ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::release_date_precision]
              end

              type type_ = :album

              module Type
                extend Spotted::Internal::Type::Enum

                ALBUM: :album

                def self?.values: -> ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::type_]
              end

              type restrictions =
                {
                  reason: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Restrictions::reason
                }

              class Restrictions < Spotted::Internal::Type::BaseModel
                attr_reader reason: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Restrictions::reason?

                def reason=: (
                  Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Restrictions::reason
                ) -> Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Restrictions::reason

                def initialize: (
                  ?reason: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Restrictions::reason
                ) -> void

                def to_hash: -> {
                  reason: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Restrictions::reason
                }

                type reason = :market | :product | :explicit

                module Reason
                  extend Spotted::Internal::Type::Enum

                  MARKET: :market
                  PRODUCT: :product
                  EXPLICIT: :explicit

                  def self?.values: -> ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Album::Restrictions::reason]
                end
              end
            end

            type artist =
              {
                id: String,
                external_urls: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Artist::ExternalURLs,
                href: String,
                name: String,
                type: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Artist::type_,
                uri: String
              }

            class Artist < Spotted::Internal::Type::BaseModel
              attr_reader id: String?

              def id=: (String) -> String

              attr_reader external_urls: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Artist::ExternalURLs?

              def external_urls=: (
                Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Artist::ExternalURLs
              ) -> Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Artist::ExternalURLs

              attr_reader href: String?

              def href=: (String) -> String

              attr_reader name: String?

              def name=: (String) -> String

              attr_reader type: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Artist::type_?

              def type=: (
                Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Artist::type_
              ) -> Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Artist::type_

              attr_reader uri: String?

              def uri=: (String) -> String

              def initialize: (
                ?id: String,
                ?external_urls: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Artist::ExternalURLs,
                ?href: String,
                ?name: String,
                ?type: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Artist::type_,
                ?uri: String
              ) -> void

              def to_hash: -> {
                id: String,
                external_urls: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Artist::ExternalURLs,
                href: String,
                name: String,
                type: Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Artist::type_,
                uri: String
              }

              type external_urls = { spotify: String }

              class ExternalURLs < Spotted::Internal::Type::BaseModel
                attr_reader spotify: String?

                def spotify=: (String) -> String

                def initialize: (?spotify: String) -> void

                def to_hash: -> { spotify: String }
              end

              type type_ = :artist

              module Type
                extend Spotted::Internal::Type::Enum

                ARTIST: :artist

                def self?.values: -> ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::Artist::type_]
              end
            end

            type external_ids = { ean: String, isrc: String, upc: String }

            class ExternalIDs < Spotted::Internal::Type::BaseModel
              attr_reader ean: String?

              def ean=: (String) -> String

              attr_reader isrc: String?

              def isrc=: (String) -> String

              attr_reader upc: String?

              def upc=: (String) -> String

              def initialize: (
                ?ean: String,
                ?isrc: String,
                ?upc: String
              ) -> void

              def to_hash: -> { ean: String, isrc: String, upc: String }
            end

            type external_urls = { spotify: String }

            class ExternalURLs < Spotted::Internal::Type::BaseModel
              attr_reader spotify: String?

              def spotify=: (String) -> String

              def initialize: (?spotify: String) -> void

              def to_hash: -> { spotify: String }
            end

            type restrictions = { reason: String }

            class Restrictions < Spotted::Internal::Type::BaseModel
              attr_reader reason: String?

              def reason=: (String) -> String

              def initialize: (?reason: String) -> void

              def to_hash: -> { reason: String }
            end

            type type_ = :track

            module Type
              extend Spotted::Internal::Type::Enum

              TRACK: :track

              def self?.values: -> ::Array[Spotted::Models::Me::PlayerGetRecentlyPlayedResponse::Item::Track::type_]
            end
          end
        end
      end
    end
  end
end
