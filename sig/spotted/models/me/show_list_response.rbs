module Spotted
  module Models
    module Me
      type show_list_response =
        {
          href: String,
          items: ::Array[Spotted::Models::Me::ShowListResponse::Item],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        }

      class ShowListResponse < Spotted::Internal::Type::BaseModel
        attr_accessor href: String

        attr_accessor items: ::Array[Spotted::Models::Me::ShowListResponse::Item]

        attr_accessor limit: Integer

        attr_accessor next_: String?

        attr_accessor offset: Integer

        attr_accessor previous: String?

        attr_accessor total: Integer

        def initialize: (
          href: String,
          items: ::Array[Spotted::Models::Me::ShowListResponse::Item],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        ) -> void

        def to_hash: -> {
          href: String,
          items: ::Array[Spotted::Models::Me::ShowListResponse::Item],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        }

        type item =
          {
            added_at: Time,
            show: Spotted::Models::Me::ShowListResponse::Item::Show
          }

        class Item < Spotted::Internal::Type::BaseModel
          attr_reader added_at: Time?

          def added_at=: (Time) -> Time

          attr_reader show: Spotted::Models::Me::ShowListResponse::Item::Show?

          def show=: (
            Spotted::Models::Me::ShowListResponse::Item::Show
          ) -> Spotted::Models::Me::ShowListResponse::Item::Show

          def initialize: (
            ?added_at: Time,
            ?show: Spotted::Models::Me::ShowListResponse::Item::Show
          ) -> void

          def to_hash: -> {
            added_at: Time,
            show: Spotted::Models::Me::ShowListResponse::Item::Show
          }

          type show =
            {
              id: String,
              available_markets: ::Array[String],
              copyrights: ::Array[Spotted::Models::Me::ShowListResponse::Item::Show::Copyright],
              description: String,
              explicit: bool,
              external_urls: Spotted::Models::Me::ShowListResponse::Item::Show::ExternalURLs,
              href: String,
              html_description: String,
              images: ::Array[Spotted::Models::Me::ShowListResponse::Item::Show::Image],
              is_externally_hosted: bool,
              languages: ::Array[String],
              media_type: String,
              name: String,
              publisher: String,
              total_episodes: Integer,
              type: Spotted::Models::Me::ShowListResponse::Item::Show::type_,
              uri: String
            }

          class Show < Spotted::Internal::Type::BaseModel
            attr_accessor id: String

            attr_accessor available_markets: ::Array[String]

            attr_accessor copyrights: ::Array[Spotted::Models::Me::ShowListResponse::Item::Show::Copyright]

            attr_accessor description: String

            attr_accessor explicit: bool

            attr_accessor external_urls: Spotted::Models::Me::ShowListResponse::Item::Show::ExternalURLs

            attr_accessor href: String

            attr_accessor html_description: String

            attr_accessor images: ::Array[Spotted::Models::Me::ShowListResponse::Item::Show::Image]

            attr_accessor is_externally_hosted: bool

            attr_accessor languages: ::Array[String]

            attr_accessor media_type: String

            attr_accessor name: String

            attr_accessor publisher: String

            attr_accessor total_episodes: Integer

            attr_accessor type: Spotted::Models::Me::ShowListResponse::Item::Show::type_

            attr_accessor uri: String

            def initialize: (
              id: String,
              available_markets: ::Array[String],
              copyrights: ::Array[Spotted::Models::Me::ShowListResponse::Item::Show::Copyright],
              description: String,
              explicit: bool,
              external_urls: Spotted::Models::Me::ShowListResponse::Item::Show::ExternalURLs,
              href: String,
              html_description: String,
              images: ::Array[Spotted::Models::Me::ShowListResponse::Item::Show::Image],
              is_externally_hosted: bool,
              languages: ::Array[String],
              media_type: String,
              name: String,
              publisher: String,
              total_episodes: Integer,
              type: Spotted::Models::Me::ShowListResponse::Item::Show::type_,
              uri: String
            ) -> void

            def to_hash: -> {
              id: String,
              available_markets: ::Array[String],
              copyrights: ::Array[Spotted::Models::Me::ShowListResponse::Item::Show::Copyright],
              description: String,
              explicit: bool,
              external_urls: Spotted::Models::Me::ShowListResponse::Item::Show::ExternalURLs,
              href: String,
              html_description: String,
              images: ::Array[Spotted::Models::Me::ShowListResponse::Item::Show::Image],
              is_externally_hosted: bool,
              languages: ::Array[String],
              media_type: String,
              name: String,
              publisher: String,
              total_episodes: Integer,
              type: Spotted::Models::Me::ShowListResponse::Item::Show::type_,
              uri: String
            }

            type copyright = { text: String, type: String }

            class Copyright < Spotted::Internal::Type::BaseModel
              attr_reader text: String?

              def text=: (String) -> String

              attr_reader type: String?

              def type=: (String) -> String

              def initialize: (?text: String, ?type: String) -> void

              def to_hash: -> { text: String, type: String }
            end

            type external_urls = { spotify: String }

            class ExternalURLs < Spotted::Internal::Type::BaseModel
              attr_reader spotify: String?

              def spotify=: (String) -> String

              def initialize: (?spotify: String) -> void

              def to_hash: -> { spotify: String }
            end

            type image = { height: Integer?, url: String, width: Integer? }

            class Image < Spotted::Internal::Type::BaseModel
              attr_accessor height: Integer?

              attr_accessor url: String

              attr_accessor width: Integer?

              def initialize: (
                height: Integer?,
                url: String,
                width: Integer?
              ) -> void

              def to_hash: -> { height: Integer?, url: String, width: Integer? }
            end

            type type_ = :show

            module Type
              extend Spotted::Internal::Type::Enum

              SHOW: :show

              def self?.values: -> ::Array[Spotted::Models::Me::ShowListResponse::Item::Show::type_]
            end
          end
        end
      end
    end
  end
end
