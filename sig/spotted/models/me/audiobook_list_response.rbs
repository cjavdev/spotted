module Spotted
  module Models
    module Me
      type audiobook_list_response =
        {
          added_at: Time,
          audiobook: Spotted::Models::Me::AudiobookListResponse::Audiobook
        }

      class AudiobookListResponse < Spotted::Internal::Type::BaseModel
        attr_reader added_at: Time?

        def added_at=: (Time) -> Time

        attr_reader audiobook: Spotted::Models::Me::AudiobookListResponse::Audiobook?

        def audiobook=: (
          Spotted::Models::Me::AudiobookListResponse::Audiobook
        ) -> Spotted::Models::Me::AudiobookListResponse::Audiobook

        def initialize: (
          ?added_at: Time,
          ?audiobook: Spotted::Models::Me::AudiobookListResponse::Audiobook
        ) -> void

        def to_hash: -> {
          added_at: Time,
          audiobook: Spotted::Models::Me::AudiobookListResponse::Audiobook
        }

        type audiobook =
          {
            id: String,
            authors: ::Array[Spotted::AuthorObject],
            available_markets: ::Array[String],
            chapters: Spotted::Models::Me::AudiobookListResponse::Audiobook::Chapters,
            copyrights: ::Array[Spotted::CopyrightObject],
            description: String,
            explicit: bool,
            external_urls: Spotted::ExternalURLObject,
            href: String,
            html_description: String,
            images: ::Array[Spotted::ImageObject],
            languages: ::Array[String],
            media_type: String,
            name: String,
            narrators: ::Array[Spotted::NarratorObject],
            publisher: String,
            total_chapters: Integer,
            type: Spotted::Models::Me::AudiobookListResponse::Audiobook::type_,
            uri: String,
            edition: String
          }

        class Audiobook < Spotted::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor authors: ::Array[Spotted::AuthorObject]

          attr_accessor available_markets: ::Array[String]

          attr_accessor chapters: Spotted::Models::Me::AudiobookListResponse::Audiobook::Chapters

          attr_accessor copyrights: ::Array[Spotted::CopyrightObject]

          attr_accessor description: String

          attr_accessor explicit: bool

          attr_accessor external_urls: Spotted::ExternalURLObject

          attr_accessor href: String

          attr_accessor html_description: String

          attr_accessor images: ::Array[Spotted::ImageObject]

          attr_accessor languages: ::Array[String]

          attr_accessor media_type: String

          attr_accessor name: String

          attr_accessor narrators: ::Array[Spotted::NarratorObject]

          attr_accessor publisher: String

          attr_accessor total_chapters: Integer

          attr_accessor type: Spotted::Models::Me::AudiobookListResponse::Audiobook::type_

          attr_accessor uri: String

          attr_reader edition: String?

          def edition=: (String) -> String

          def initialize: (
            id: String,
            authors: ::Array[Spotted::AuthorObject],
            available_markets: ::Array[String],
            chapters: Spotted::Models::Me::AudiobookListResponse::Audiobook::Chapters,
            copyrights: ::Array[Spotted::CopyrightObject],
            description: String,
            explicit: bool,
            external_urls: Spotted::ExternalURLObject,
            href: String,
            html_description: String,
            images: ::Array[Spotted::ImageObject],
            languages: ::Array[String],
            media_type: String,
            name: String,
            narrators: ::Array[Spotted::NarratorObject],
            publisher: String,
            total_chapters: Integer,
            type: Spotted::Models::Me::AudiobookListResponse::Audiobook::type_,
            uri: String,
            ?edition: String
          ) -> void

          def to_hash: -> {
            id: String,
            authors: ::Array[Spotted::AuthorObject],
            available_markets: ::Array[String],
            chapters: Spotted::Models::Me::AudiobookListResponse::Audiobook::Chapters,
            copyrights: ::Array[Spotted::CopyrightObject],
            description: String,
            explicit: bool,
            external_urls: Spotted::ExternalURLObject,
            href: String,
            html_description: String,
            images: ::Array[Spotted::ImageObject],
            languages: ::Array[String],
            media_type: String,
            name: String,
            narrators: ::Array[Spotted::NarratorObject],
            publisher: String,
            total_chapters: Integer,
            type: Spotted::Models::Me::AudiobookListResponse::Audiobook::type_,
            uri: String,
            edition: String
          }

          type chapters =
            {
              href: String,
              items: ::Array[Spotted::SimplifiedChapterObject],
              limit: Integer,
              next_: String?,
              offset: Integer,
              previous: String?,
              total: Integer
            }

          class Chapters < Spotted::Internal::Type::BaseModel
            attr_accessor href: String

            attr_accessor items: ::Array[Spotted::SimplifiedChapterObject]

            attr_accessor limit: Integer

            attr_accessor next_: String?

            attr_accessor offset: Integer

            attr_accessor previous: String?

            attr_accessor total: Integer

            def initialize: (
              href: String,
              items: ::Array[Spotted::SimplifiedChapterObject],
              limit: Integer,
              next_: String?,
              offset: Integer,
              previous: String?,
              total: Integer
            ) -> void

            def to_hash: -> {
              href: String,
              items: ::Array[Spotted::SimplifiedChapterObject],
              limit: Integer,
              next_: String?,
              offset: Integer,
              previous: String?,
              total: Integer
            }
          end

          type type_ = :audiobook

          module Type
            extend Spotted::Internal::Type::Enum

            AUDIOBOOK: :audiobook

            def self?.values: -> ::Array[Spotted::Models::Me::AudiobookListResponse::Audiobook::type_]
          end
        end
      end
    end
  end
end
