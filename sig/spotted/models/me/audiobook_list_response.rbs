module Spotted
  module Models
    module Me
      type audiobook_list_response =
        {
          added_at: Time,
          audiobook: Spotted::Models::Me::AudiobookListResponse::Audiobook
        }

      class AudiobookListResponse < Spotted::Internal::Type::BaseModel
        attr_reader added_at: Time?

        def added_at=: (Time) -> Time

        attr_reader audiobook: Spotted::Models::Me::AudiobookListResponse::Audiobook?

        def audiobook=: (
          Spotted::Models::Me::AudiobookListResponse::Audiobook
        ) -> Spotted::Models::Me::AudiobookListResponse::Audiobook

        def initialize: (
          ?added_at: Time,
          ?audiobook: Spotted::Models::Me::AudiobookListResponse::Audiobook
        ) -> void

        def to_hash: -> {
          added_at: Time,
          audiobook: Spotted::Models::Me::AudiobookListResponse::Audiobook
        }

        type audiobook =
          {
            chapters: Spotted::Models::Me::AudiobookListResponse::Audiobook::Chapters
          }

        class Audiobook < Spotted::Models::AudiobookBase
          def chapters: -> Spotted::Models::Me::AudiobookListResponse::Audiobook::Chapters

          def chapters=: (
            Spotted::Models::Me::AudiobookListResponse::Audiobook::Chapters _
          ) -> Spotted::Models::Me::AudiobookListResponse::Audiobook::Chapters

          def initialize: (
            chapters: Spotted::Models::Me::AudiobookListResponse::Audiobook::Chapters
          ) -> void

          def to_hash: -> {
            chapters: Spotted::Models::Me::AudiobookListResponse::Audiobook::Chapters
          }

          type chapters =
            {
              href: String,
              items: ::Array[Spotted::SimplifiedChapterObject],
              limit: Integer,
              next_: String?,
              offset: Integer,
              previous: String?,
              total: Integer
            }

          class Chapters < Spotted::Internal::Type::BaseModel
            attr_accessor href: String

            attr_accessor items: ::Array[Spotted::SimplifiedChapterObject]

            attr_accessor limit: Integer

            attr_accessor next_: String?

            attr_accessor offset: Integer

            attr_accessor previous: String?

            attr_accessor total: Integer

            def initialize: (
              href: String,
              items: ::Array[Spotted::SimplifiedChapterObject],
              limit: Integer,
              next_: String?,
              offset: Integer,
              previous: String?,
              total: Integer
            ) -> void

            def to_hash: -> {
              href: String,
              items: ::Array[Spotted::SimplifiedChapterObject],
              limit: Integer,
              next_: String?,
              offset: Integer,
              previous: String?,
              total: Integer
            }
          end
        end
      end
    end
  end
end
