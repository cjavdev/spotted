module Spotted
  module Models
    module Me
      type audiobook_list_response =
        {
          id: String,
          authors: ::Array[Spotted::AuthorObject],
          available_markets: ::Array[String],
          copyrights: ::Array[Spotted::CopyrightObject],
          description: String,
          explicit: bool,
          external_urls: Spotted::ExternalURLObject,
          href: String,
          html_description: String,
          images: ::Array[Spotted::ImageObject],
          languages: ::Array[String],
          media_type: String,
          name: String,
          narrators: ::Array[Spotted::NarratorObject],
          publisher: String,
          total_chapters: Integer,
          type: Spotted::Models::Me::AudiobookListResponse::type_,
          uri: String,
          edition: String
        }

      class AudiobookListResponse < Spotted::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor authors: ::Array[Spotted::AuthorObject]

        attr_accessor available_markets: ::Array[String]

        attr_accessor copyrights: ::Array[Spotted::CopyrightObject]

        attr_accessor description: String

        attr_accessor explicit: bool

        attr_accessor external_urls: Spotted::ExternalURLObject

        attr_accessor href: String

        attr_accessor html_description: String

        attr_accessor images: ::Array[Spotted::ImageObject]

        attr_accessor languages: ::Array[String]

        attr_accessor media_type: String

        attr_accessor name: String

        attr_accessor narrators: ::Array[Spotted::NarratorObject]

        attr_accessor publisher: String

        attr_accessor total_chapters: Integer

        attr_accessor type: Spotted::Models::Me::AudiobookListResponse::type_

        attr_accessor uri: String

        attr_reader edition: String?

        def edition=: (String) -> String

        def initialize: (
          id: String,
          authors: ::Array[Spotted::AuthorObject],
          available_markets: ::Array[String],
          copyrights: ::Array[Spotted::CopyrightObject],
          description: String,
          explicit: bool,
          external_urls: Spotted::ExternalURLObject,
          href: String,
          html_description: String,
          images: ::Array[Spotted::ImageObject],
          languages: ::Array[String],
          media_type: String,
          name: String,
          narrators: ::Array[Spotted::NarratorObject],
          publisher: String,
          total_chapters: Integer,
          type: Spotted::Models::Me::AudiobookListResponse::type_,
          uri: String,
          ?edition: String
        ) -> void

        def to_hash: -> {
          id: String,
          authors: ::Array[Spotted::AuthorObject],
          available_markets: ::Array[String],
          copyrights: ::Array[Spotted::CopyrightObject],
          description: String,
          explicit: bool,
          external_urls: Spotted::ExternalURLObject,
          href: String,
          html_description: String,
          images: ::Array[Spotted::ImageObject],
          languages: ::Array[String],
          media_type: String,
          name: String,
          narrators: ::Array[Spotted::NarratorObject],
          publisher: String,
          total_chapters: Integer,
          type: Spotted::Models::Me::AudiobookListResponse::type_,
          uri: String,
          edition: String
        }

        type type_ = :audiobook

        module Type
          extend Spotted::Internal::Type::Enum

          AUDIOBOOK: :audiobook

          def self?.values: -> ::Array[Spotted::Models::Me::AudiobookListResponse::type_]
        end
      end
    end
  end
end
