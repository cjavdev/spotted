module Spotted
  module Models
    module Me
      type audiobook_list_response =
        {
          href: String,
          items: ::Array[Spotted::Models::Me::AudiobookListResponse::Item],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        }

      class AudiobookListResponse < Spotted::Internal::Type::BaseModel
        attr_accessor href: String

        attr_accessor items: ::Array[Spotted::Models::Me::AudiobookListResponse::Item]

        attr_accessor limit: Integer

        attr_accessor next_: String?

        attr_accessor offset: Integer

        attr_accessor previous: String?

        attr_accessor total: Integer

        def initialize: (
          href: String,
          items: ::Array[Spotted::Models::Me::AudiobookListResponse::Item],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        ) -> void

        def to_hash: -> {
          href: String,
          items: ::Array[Spotted::Models::Me::AudiobookListResponse::Item],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        }

        type item =
          {
            id: String,
            authors: ::Array[Spotted::Models::Me::AudiobookListResponse::Item::Author],
            available_markets: ::Array[String],
            copyrights: ::Array[Spotted::Models::Me::AudiobookListResponse::Item::Copyright],
            description: String,
            explicit: bool,
            external_urls: Spotted::Models::Me::AudiobookListResponse::Item::ExternalURLs,
            href: String,
            html_description: String,
            images: ::Array[Spotted::Models::Me::AudiobookListResponse::Item::Image],
            languages: ::Array[String],
            media_type: String,
            name: String,
            narrators: ::Array[Spotted::Models::Me::AudiobookListResponse::Item::Narrator],
            publisher: String,
            total_chapters: Integer,
            type: Spotted::Models::Me::AudiobookListResponse::Item::type_,
            uri: String,
            edition: String
          }

        class Item < Spotted::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor authors: ::Array[Spotted::Models::Me::AudiobookListResponse::Item::Author]

          attr_accessor available_markets: ::Array[String]

          attr_accessor copyrights: ::Array[Spotted::Models::Me::AudiobookListResponse::Item::Copyright]

          attr_accessor description: String

          attr_accessor explicit: bool

          attr_accessor external_urls: Spotted::Models::Me::AudiobookListResponse::Item::ExternalURLs

          attr_accessor href: String

          attr_accessor html_description: String

          attr_accessor images: ::Array[Spotted::Models::Me::AudiobookListResponse::Item::Image]

          attr_accessor languages: ::Array[String]

          attr_accessor media_type: String

          attr_accessor name: String

          attr_accessor narrators: ::Array[Spotted::Models::Me::AudiobookListResponse::Item::Narrator]

          attr_accessor publisher: String

          attr_accessor total_chapters: Integer

          attr_accessor type: Spotted::Models::Me::AudiobookListResponse::Item::type_

          attr_accessor uri: String

          attr_reader edition: String?

          def edition=: (String) -> String

          def initialize: (
            id: String,
            authors: ::Array[Spotted::Models::Me::AudiobookListResponse::Item::Author],
            available_markets: ::Array[String],
            copyrights: ::Array[Spotted::Models::Me::AudiobookListResponse::Item::Copyright],
            description: String,
            explicit: bool,
            external_urls: Spotted::Models::Me::AudiobookListResponse::Item::ExternalURLs,
            href: String,
            html_description: String,
            images: ::Array[Spotted::Models::Me::AudiobookListResponse::Item::Image],
            languages: ::Array[String],
            media_type: String,
            name: String,
            narrators: ::Array[Spotted::Models::Me::AudiobookListResponse::Item::Narrator],
            publisher: String,
            total_chapters: Integer,
            type: Spotted::Models::Me::AudiobookListResponse::Item::type_,
            uri: String,
            ?edition: String
          ) -> void

          def to_hash: -> {
            id: String,
            authors: ::Array[Spotted::Models::Me::AudiobookListResponse::Item::Author],
            available_markets: ::Array[String],
            copyrights: ::Array[Spotted::Models::Me::AudiobookListResponse::Item::Copyright],
            description: String,
            explicit: bool,
            external_urls: Spotted::Models::Me::AudiobookListResponse::Item::ExternalURLs,
            href: String,
            html_description: String,
            images: ::Array[Spotted::Models::Me::AudiobookListResponse::Item::Image],
            languages: ::Array[String],
            media_type: String,
            name: String,
            narrators: ::Array[Spotted::Models::Me::AudiobookListResponse::Item::Narrator],
            publisher: String,
            total_chapters: Integer,
            type: Spotted::Models::Me::AudiobookListResponse::Item::type_,
            uri: String,
            edition: String
          }

          type author = { name: String }

          class Author < Spotted::Internal::Type::BaseModel
            attr_reader name: String?

            def name=: (String) -> String

            def initialize: (?name: String) -> void

            def to_hash: -> { name: String }
          end

          type copyright = { text: String, type: String }

          class Copyright < Spotted::Internal::Type::BaseModel
            attr_reader text: String?

            def text=: (String) -> String

            attr_reader type: String?

            def type=: (String) -> String

            def initialize: (?text: String, ?type: String) -> void

            def to_hash: -> { text: String, type: String }
          end

          type external_urls = { spotify: String }

          class ExternalURLs < Spotted::Internal::Type::BaseModel
            attr_reader spotify: String?

            def spotify=: (String) -> String

            def initialize: (?spotify: String) -> void

            def to_hash: -> { spotify: String }
          end

          type image = { height: Integer?, url: String, width: Integer? }

          class Image < Spotted::Internal::Type::BaseModel
            attr_accessor height: Integer?

            attr_accessor url: String

            attr_accessor width: Integer?

            def initialize: (
              height: Integer?,
              url: String,
              width: Integer?
            ) -> void

            def to_hash: -> { height: Integer?, url: String, width: Integer? }
          end

          type narrator = { name: String }

          class Narrator < Spotted::Internal::Type::BaseModel
            attr_reader name: String?

            def name=: (String) -> String

            def initialize: (?name: String) -> void

            def to_hash: -> { name: String }
          end

          type type_ = :audiobook

          module Type
            extend Spotted::Internal::Type::Enum

            AUDIOBOOK: :audiobook

            def self?.values: -> ::Array[Spotted::Models::Me::AudiobookListResponse::Item::type_]
          end
        end
      end
    end
  end
end
