module Spotted
  module Models
    module Me
      type player_get_currently_playing_response =
        {
          actions: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Actions,
          context: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Context,
          currently_playing_type: String,
          device: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Device,
          is_playing: bool,
          item: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::item,
          progress_ms: Integer,
          repeat_state: String,
          shuffle_state: bool,
          timestamp: Integer
        }

      class PlayerGetCurrentlyPlayingResponse < Spotted::Internal::Type::BaseModel
        attr_reader actions: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Actions?

        def actions=: (
          Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Actions
        ) -> Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Actions

        attr_reader context: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Context?

        def context=: (
          Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Context
        ) -> Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Context

        attr_reader currently_playing_type: String?

        def currently_playing_type=: (String) -> String

        attr_reader device: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Device?

        def device=: (
          Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Device
        ) -> Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Device

        attr_reader is_playing: bool?

        def is_playing=: (bool) -> bool

        attr_reader item: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::item?

        def item=: (
          Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::item
        ) -> Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::item

        attr_reader progress_ms: Integer?

        def progress_ms=: (Integer) -> Integer

        attr_reader repeat_state: String?

        def repeat_state=: (String) -> String

        attr_reader shuffle_state: bool?

        def shuffle_state=: (bool) -> bool

        attr_reader timestamp: Integer?

        def timestamp=: (Integer) -> Integer

        def initialize: (
          ?actions: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Actions,
          ?context: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Context,
          ?currently_playing_type: String,
          ?device: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Device,
          ?is_playing: bool,
          ?item: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::item,
          ?progress_ms: Integer,
          ?repeat_state: String,
          ?shuffle_state: bool,
          ?timestamp: Integer
        ) -> void

        def to_hash: -> {
          actions: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Actions,
          context: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Context,
          currently_playing_type: String,
          device: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Device,
          is_playing: bool,
          item: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::item,
          progress_ms: Integer,
          repeat_state: String,
          shuffle_state: bool,
          timestamp: Integer
        }

        type actions =
          {
            interrupting_playback: bool,
            pausing: bool,
            resuming: bool,
            seeking: bool,
            skipping_next: bool,
            skipping_prev: bool,
            toggling_repeat_context: bool,
            toggling_repeat_track: bool,
            toggling_shuffle: bool,
            transferring_playback: bool
          }

        class Actions < Spotted::Internal::Type::BaseModel
          attr_reader interrupting_playback: bool?

          def interrupting_playback=: (bool) -> bool

          attr_reader pausing: bool?

          def pausing=: (bool) -> bool

          attr_reader resuming: bool?

          def resuming=: (bool) -> bool

          attr_reader seeking: bool?

          def seeking=: (bool) -> bool

          attr_reader skipping_next: bool?

          def skipping_next=: (bool) -> bool

          attr_reader skipping_prev: bool?

          def skipping_prev=: (bool) -> bool

          attr_reader toggling_repeat_context: bool?

          def toggling_repeat_context=: (bool) -> bool

          attr_reader toggling_repeat_track: bool?

          def toggling_repeat_track=: (bool) -> bool

          attr_reader toggling_shuffle: bool?

          def toggling_shuffle=: (bool) -> bool

          attr_reader transferring_playback: bool?

          def transferring_playback=: (bool) -> bool

          def initialize: (
            ?interrupting_playback: bool,
            ?pausing: bool,
            ?resuming: bool,
            ?seeking: bool,
            ?skipping_next: bool,
            ?skipping_prev: bool,
            ?toggling_repeat_context: bool,
            ?toggling_repeat_track: bool,
            ?toggling_shuffle: bool,
            ?transferring_playback: bool
          ) -> void

          def to_hash: -> {
            interrupting_playback: bool,
            pausing: bool,
            resuming: bool,
            seeking: bool,
            skipping_next: bool,
            skipping_prev: bool,
            toggling_repeat_context: bool,
            toggling_repeat_track: bool,
            toggling_shuffle: bool,
            transferring_playback: bool
          }
        end

        type context =
          {
            external_urls: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Context::ExternalURLs,
            href: String,
            type: String,
            uri: String
          }

        class Context < Spotted::Internal::Type::BaseModel
          attr_reader external_urls: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Context::ExternalURLs?

          def external_urls=: (
            Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Context::ExternalURLs
          ) -> Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Context::ExternalURLs

          attr_reader href: String?

          def href=: (String) -> String

          attr_reader type: String?

          def type=: (String) -> String

          attr_reader uri: String?

          def uri=: (String) -> String

          def initialize: (
            ?external_urls: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Context::ExternalURLs,
            ?href: String,
            ?type: String,
            ?uri: String
          ) -> void

          def to_hash: -> {
            external_urls: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Context::ExternalURLs,
            href: String,
            type: String,
            uri: String
          }

          type external_urls = { spotify: String }

          class ExternalURLs < Spotted::Internal::Type::BaseModel
            attr_reader spotify: String?

            def spotify=: (String) -> String

            def initialize: (?spotify: String) -> void

            def to_hash: -> { spotify: String }
          end
        end

        type device =
          {
            id: String?,
            is_active: bool,
            is_private_session: bool,
            is_restricted: bool,
            name: String,
            supports_volume: bool,
            type: String,
            volume_percent: Integer?
          }

        class Device < Spotted::Internal::Type::BaseModel
          attr_accessor id: String?

          attr_reader is_active: bool?

          def is_active=: (bool) -> bool

          attr_reader is_private_session: bool?

          def is_private_session=: (bool) -> bool

          attr_reader is_restricted: bool?

          def is_restricted=: (bool) -> bool

          attr_reader name: String?

          def name=: (String) -> String

          attr_reader supports_volume: bool?

          def supports_volume=: (bool) -> bool

          attr_reader type: String?

          def type=: (String) -> String

          attr_accessor volume_percent: Integer?

          def initialize: (
            ?id: String?,
            ?is_active: bool,
            ?is_private_session: bool,
            ?is_restricted: bool,
            ?name: String,
            ?supports_volume: bool,
            ?type: String,
            ?volume_percent: Integer?
          ) -> void

          def to_hash: -> {
            id: String?,
            is_active: bool,
            is_private_session: bool,
            is_restricted: bool,
            name: String,
            supports_volume: bool,
            type: String,
            volume_percent: Integer?
          }
        end

        type item =
          Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track
          | Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode

        module Item
          extend Spotted::Internal::Type::Union

          type track =
            {
              id: String,
              album: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album,
              artists: ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Artist],
              available_markets: ::Array[String],
              disc_number: Integer,
              duration_ms: Integer,
              explicit: bool,
              external_ids: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::ExternalIDs,
              external_urls: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::ExternalURLs,
              href: String,
              is_local: bool,
              is_playable: bool,
              linked_from: top,
              name: String,
              popularity: Integer,
              preview_url: String?,
              restrictions: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Restrictions,
              track_number: Integer,
              type: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::type_,
              uri: String
            }

          class Track < Spotted::Internal::Type::BaseModel
            attr_reader id: String?

            def id=: (String) -> String

            attr_reader album: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album?

            def album=: (
              Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album
            ) -> Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album

            attr_reader artists: ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Artist]?

            def artists=: (
              ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Artist]
            ) -> ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Artist]

            attr_reader available_markets: ::Array[String]?

            def available_markets=: (::Array[String]) -> ::Array[String]

            attr_reader disc_number: Integer?

            def disc_number=: (Integer) -> Integer

            attr_reader duration_ms: Integer?

            def duration_ms=: (Integer) -> Integer

            attr_reader explicit: bool?

            def explicit=: (bool) -> bool

            attr_reader external_ids: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::ExternalIDs?

            def external_ids=: (
              Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::ExternalIDs
            ) -> Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::ExternalIDs

            attr_reader external_urls: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::ExternalURLs?

            def external_urls=: (
              Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::ExternalURLs
            ) -> Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::ExternalURLs

            attr_reader href: String?

            def href=: (String) -> String

            attr_reader is_local: bool?

            def is_local=: (bool) -> bool

            attr_reader is_playable: bool?

            def is_playable=: (bool) -> bool

            attr_reader linked_from: top?

            def linked_from=: (top) -> top

            attr_reader name: String?

            def name=: (String) -> String

            attr_reader popularity: Integer?

            def popularity=: (Integer) -> Integer

            attr_accessor preview_url: String?

            attr_reader restrictions: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Restrictions?

            def restrictions=: (
              Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Restrictions
            ) -> Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Restrictions

            attr_reader track_number: Integer?

            def track_number=: (Integer) -> Integer

            attr_reader type: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::type_?

            def type=: (
              Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::type_
            ) -> Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::type_

            attr_reader uri: String?

            def uri=: (String) -> String

            def initialize: (
              ?id: String,
              ?album: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album,
              ?artists: ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Artist],
              ?available_markets: ::Array[String],
              ?disc_number: Integer,
              ?duration_ms: Integer,
              ?explicit: bool,
              ?external_ids: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::ExternalIDs,
              ?external_urls: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::ExternalURLs,
              ?href: String,
              ?is_local: bool,
              ?is_playable: bool,
              ?linked_from: top,
              ?name: String,
              ?popularity: Integer,
              ?preview_url: String?,
              ?restrictions: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Restrictions,
              ?track_number: Integer,
              ?type: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::type_,
              ?uri: String
            ) -> void

            def to_hash: -> {
              id: String,
              album: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album,
              artists: ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Artist],
              available_markets: ::Array[String],
              disc_number: Integer,
              duration_ms: Integer,
              explicit: bool,
              external_ids: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::ExternalIDs,
              external_urls: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::ExternalURLs,
              href: String,
              is_local: bool,
              is_playable: bool,
              linked_from: top,
              name: String,
              popularity: Integer,
              preview_url: String?,
              restrictions: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Restrictions,
              track_number: Integer,
              type: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::type_,
              uri: String
            }

            type album =
              {
                id: String,
                album_type: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::album_type,
                artists: ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Artist],
                available_markets: ::Array[String],
                external_urls: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::ExternalURLs,
                href: String,
                images: ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Image],
                name: String,
                release_date: String,
                release_date_precision: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::release_date_precision,
                total_tracks: Integer,
                type: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::type_,
                uri: String,
                restrictions: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Restrictions
              }

            class Album < Spotted::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor album_type: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::album_type

              attr_accessor artists: ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Artist]

              attr_accessor available_markets: ::Array[String]

              attr_accessor external_urls: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::ExternalURLs

              attr_accessor href: String

              attr_accessor images: ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Image]

              attr_accessor name: String

              attr_accessor release_date: String

              attr_accessor release_date_precision: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::release_date_precision

              attr_accessor total_tracks: Integer

              attr_accessor type: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::type_

              attr_accessor uri: String

              attr_reader restrictions: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Restrictions?

              def restrictions=: (
                Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Restrictions
              ) -> Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Restrictions

              def initialize: (
                id: String,
                album_type: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::album_type,
                artists: ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Artist],
                available_markets: ::Array[String],
                external_urls: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::ExternalURLs,
                href: String,
                images: ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Image],
                name: String,
                release_date: String,
                release_date_precision: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::release_date_precision,
                total_tracks: Integer,
                type: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::type_,
                uri: String,
                ?restrictions: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Restrictions
              ) -> void

              def to_hash: -> {
                id: String,
                album_type: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::album_type,
                artists: ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Artist],
                available_markets: ::Array[String],
                external_urls: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::ExternalURLs,
                href: String,
                images: ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Image],
                name: String,
                release_date: String,
                release_date_precision: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::release_date_precision,
                total_tracks: Integer,
                type: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::type_,
                uri: String,
                restrictions: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Restrictions
              }

              type album_type = :album | :single | :compilation

              module AlbumType
                extend Spotted::Internal::Type::Enum

                ALBUM: :album
                SINGLE: :single
                COMPILATION: :compilation

                def self?.values: -> ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::album_type]
              end

              type artist =
                {
                  id: String,
                  external_urls: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Artist::ExternalURLs,
                  href: String,
                  name: String,
                  type: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Artist::type_,
                  uri: String
                }

              class Artist < Spotted::Internal::Type::BaseModel
                attr_reader id: String?

                def id=: (String) -> String

                attr_reader external_urls: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Artist::ExternalURLs?

                def external_urls=: (
                  Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Artist::ExternalURLs
                ) -> Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Artist::ExternalURLs

                attr_reader href: String?

                def href=: (String) -> String

                attr_reader name: String?

                def name=: (String) -> String

                attr_reader type: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Artist::type_?

                def type=: (
                  Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Artist::type_
                ) -> Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Artist::type_

                attr_reader uri: String?

                def uri=: (String) -> String

                def initialize: (
                  ?id: String,
                  ?external_urls: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Artist::ExternalURLs,
                  ?href: String,
                  ?name: String,
                  ?type: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Artist::type_,
                  ?uri: String
                ) -> void

                def to_hash: -> {
                  id: String,
                  external_urls: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Artist::ExternalURLs,
                  href: String,
                  name: String,
                  type: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Artist::type_,
                  uri: String
                }

                type external_urls = { spotify: String }

                class ExternalURLs < Spotted::Internal::Type::BaseModel
                  attr_reader spotify: String?

                  def spotify=: (String) -> String

                  def initialize: (?spotify: String) -> void

                  def to_hash: -> { spotify: String }
                end

                type type_ = :artist

                module Type
                  extend Spotted::Internal::Type::Enum

                  ARTIST: :artist

                  def self?.values: -> ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Artist::type_]
                end
              end

              type external_urls = { spotify: String }

              class ExternalURLs < Spotted::Internal::Type::BaseModel
                attr_reader spotify: String?

                def spotify=: (String) -> String

                def initialize: (?spotify: String) -> void

                def to_hash: -> { spotify: String }
              end

              type image = { height: Integer?, url: String, width: Integer? }

              class Image < Spotted::Internal::Type::BaseModel
                attr_accessor height: Integer?

                attr_accessor url: String

                attr_accessor width: Integer?

                def initialize: (
                  height: Integer?,
                  url: String,
                  width: Integer?
                ) -> void

                def to_hash: -> {
                  height: Integer?,
                  url: String,
                  width: Integer?
                }
              end

              type release_date_precision = :year | :month | :day

              module ReleaseDatePrecision
                extend Spotted::Internal::Type::Enum

                YEAR: :year
                MONTH: :month
                DAY: :day

                def self?.values: -> ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::release_date_precision]
              end

              type type_ = :album

              module Type
                extend Spotted::Internal::Type::Enum

                ALBUM: :album

                def self?.values: -> ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::type_]
              end

              type restrictions =
                {
                  reason: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Restrictions::reason
                }

              class Restrictions < Spotted::Internal::Type::BaseModel
                attr_reader reason: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Restrictions::reason?

                def reason=: (
                  Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Restrictions::reason
                ) -> Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Restrictions::reason

                def initialize: (
                  ?reason: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Restrictions::reason
                ) -> void

                def to_hash: -> {
                  reason: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Restrictions::reason
                }

                type reason = :market | :product | :explicit

                module Reason
                  extend Spotted::Internal::Type::Enum

                  MARKET: :market
                  PRODUCT: :product
                  EXPLICIT: :explicit

                  def self?.values: -> ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Album::Restrictions::reason]
                end
              end
            end

            type artist =
              {
                id: String,
                external_urls: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Artist::ExternalURLs,
                href: String,
                name: String,
                type: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Artist::type_,
                uri: String
              }

            class Artist < Spotted::Internal::Type::BaseModel
              attr_reader id: String?

              def id=: (String) -> String

              attr_reader external_urls: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Artist::ExternalURLs?

              def external_urls=: (
                Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Artist::ExternalURLs
              ) -> Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Artist::ExternalURLs

              attr_reader href: String?

              def href=: (String) -> String

              attr_reader name: String?

              def name=: (String) -> String

              attr_reader type: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Artist::type_?

              def type=: (
                Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Artist::type_
              ) -> Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Artist::type_

              attr_reader uri: String?

              def uri=: (String) -> String

              def initialize: (
                ?id: String,
                ?external_urls: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Artist::ExternalURLs,
                ?href: String,
                ?name: String,
                ?type: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Artist::type_,
                ?uri: String
              ) -> void

              def to_hash: -> {
                id: String,
                external_urls: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Artist::ExternalURLs,
                href: String,
                name: String,
                type: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Artist::type_,
                uri: String
              }

              type external_urls = { spotify: String }

              class ExternalURLs < Spotted::Internal::Type::BaseModel
                attr_reader spotify: String?

                def spotify=: (String) -> String

                def initialize: (?spotify: String) -> void

                def to_hash: -> { spotify: String }
              end

              type type_ = :artist

              module Type
                extend Spotted::Internal::Type::Enum

                ARTIST: :artist

                def self?.values: -> ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::Artist::type_]
              end
            end

            type external_ids = { ean: String, isrc: String, upc: String }

            class ExternalIDs < Spotted::Internal::Type::BaseModel
              attr_reader ean: String?

              def ean=: (String) -> String

              attr_reader isrc: String?

              def isrc=: (String) -> String

              attr_reader upc: String?

              def upc=: (String) -> String

              def initialize: (
                ?ean: String,
                ?isrc: String,
                ?upc: String
              ) -> void

              def to_hash: -> { ean: String, isrc: String, upc: String }
            end

            type external_urls = { spotify: String }

            class ExternalURLs < Spotted::Internal::Type::BaseModel
              attr_reader spotify: String?

              def spotify=: (String) -> String

              def initialize: (?spotify: String) -> void

              def to_hash: -> { spotify: String }
            end

            type restrictions = { reason: String }

            class Restrictions < Spotted::Internal::Type::BaseModel
              attr_reader reason: String?

              def reason=: (String) -> String

              def initialize: (?reason: String) -> void

              def to_hash: -> { reason: String }
            end

            type type_ = :track

            module Type
              extend Spotted::Internal::Type::Enum

              TRACK: :track

              def self?.values: -> ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Track::type_]
            end
          end

          type episode =
            {
              id: String,
              audio_preview_url: String?,
              description: String,
              duration_ms: Integer,
              explicit: bool,
              external_urls: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::ExternalURLs,
              href: String,
              html_description: String,
              images: ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Image],
              is_externally_hosted: bool,
              is_playable: bool,
              languages: ::Array[String],
              name: String,
              release_date: String,
              release_date_precision: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::release_date_precision,
              show: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Show,
              type: :episode,
              uri: String,
              language: String,
              restrictions: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Restrictions,
              resume_point: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::ResumePoint
            }

          class Episode < Spotted::Internal::Type::BaseModel
            attr_accessor id: String

            attr_accessor audio_preview_url: String?

            attr_accessor description: String

            attr_accessor duration_ms: Integer

            attr_accessor explicit: bool

            attr_accessor external_urls: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::ExternalURLs

            attr_accessor href: String

            attr_accessor html_description: String

            attr_accessor images: ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Image]

            attr_accessor is_externally_hosted: bool

            attr_accessor is_playable: bool

            attr_accessor languages: ::Array[String]

            attr_accessor name: String

            attr_accessor release_date: String

            attr_accessor release_date_precision: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::release_date_precision

            attr_accessor show: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Show

            attr_accessor type: :episode

            attr_accessor uri: String

            attr_reader language: String?

            def language=: (String) -> String

            attr_reader restrictions: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Restrictions?

            def restrictions=: (
              Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Restrictions
            ) -> Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Restrictions

            attr_reader resume_point: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::ResumePoint?

            def resume_point=: (
              Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::ResumePoint
            ) -> Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::ResumePoint

            def initialize: (
              id: String,
              audio_preview_url: String?,
              description: String,
              duration_ms: Integer,
              explicit: bool,
              external_urls: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::ExternalURLs,
              href: String,
              html_description: String,
              images: ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Image],
              is_externally_hosted: bool,
              is_playable: bool,
              languages: ::Array[String],
              name: String,
              release_date: String,
              release_date_precision: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::release_date_precision,
              show: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Show,
              uri: String,
              ?language: String,
              ?restrictions: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Restrictions,
              ?resume_point: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::ResumePoint,
              ?type: :episode
            ) -> void

            def to_hash: -> {
              id: String,
              audio_preview_url: String?,
              description: String,
              duration_ms: Integer,
              explicit: bool,
              external_urls: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::ExternalURLs,
              href: String,
              html_description: String,
              images: ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Image],
              is_externally_hosted: bool,
              is_playable: bool,
              languages: ::Array[String],
              name: String,
              release_date: String,
              release_date_precision: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::release_date_precision,
              show: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Show,
              type: :episode,
              uri: String,
              language: String,
              restrictions: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Restrictions,
              resume_point: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::ResumePoint
            }

            type external_urls = { spotify: String }

            class ExternalURLs < Spotted::Internal::Type::BaseModel
              attr_reader spotify: String?

              def spotify=: (String) -> String

              def initialize: (?spotify: String) -> void

              def to_hash: -> { spotify: String }
            end

            type image = { height: Integer?, url: String, width: Integer? }

            class Image < Spotted::Internal::Type::BaseModel
              attr_accessor height: Integer?

              attr_accessor url: String

              attr_accessor width: Integer?

              def initialize: (
                height: Integer?,
                url: String,
                width: Integer?
              ) -> void

              def to_hash: -> { height: Integer?, url: String, width: Integer? }
            end

            type release_date_precision = :year | :month | :day

            module ReleaseDatePrecision
              extend Spotted::Internal::Type::Enum

              YEAR: :year
              MONTH: :month
              DAY: :day

              def self?.values: -> ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::release_date_precision]
            end

            type show =
              {
                id: String,
                available_markets: ::Array[String],
                copyrights: ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Show::Copyright],
                description: String,
                explicit: bool,
                external_urls: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Show::ExternalURLs,
                href: String,
                html_description: String,
                images: ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Show::Image],
                is_externally_hosted: bool,
                languages: ::Array[String],
                media_type: String,
                name: String,
                publisher: String,
                total_episodes: Integer,
                type: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Show::type_,
                uri: String
              }

            class Show < Spotted::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor available_markets: ::Array[String]

              attr_accessor copyrights: ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Show::Copyright]

              attr_accessor description: String

              attr_accessor explicit: bool

              attr_accessor external_urls: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Show::ExternalURLs

              attr_accessor href: String

              attr_accessor html_description: String

              attr_accessor images: ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Show::Image]

              attr_accessor is_externally_hosted: bool

              attr_accessor languages: ::Array[String]

              attr_accessor media_type: String

              attr_accessor name: String

              attr_accessor publisher: String

              attr_accessor total_episodes: Integer

              attr_accessor type: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Show::type_

              attr_accessor uri: String

              def initialize: (
                id: String,
                available_markets: ::Array[String],
                copyrights: ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Show::Copyright],
                description: String,
                explicit: bool,
                external_urls: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Show::ExternalURLs,
                href: String,
                html_description: String,
                images: ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Show::Image],
                is_externally_hosted: bool,
                languages: ::Array[String],
                media_type: String,
                name: String,
                publisher: String,
                total_episodes: Integer,
                type: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Show::type_,
                uri: String
              ) -> void

              def to_hash: -> {
                id: String,
                available_markets: ::Array[String],
                copyrights: ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Show::Copyright],
                description: String,
                explicit: bool,
                external_urls: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Show::ExternalURLs,
                href: String,
                html_description: String,
                images: ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Show::Image],
                is_externally_hosted: bool,
                languages: ::Array[String],
                media_type: String,
                name: String,
                publisher: String,
                total_episodes: Integer,
                type: Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Show::type_,
                uri: String
              }

              type copyright = { text: String, type: String }

              class Copyright < Spotted::Internal::Type::BaseModel
                attr_reader text: String?

                def text=: (String) -> String

                attr_reader type: String?

                def type=: (String) -> String

                def initialize: (?text: String, ?type: String) -> void

                def to_hash: -> { text: String, type: String }
              end

              type external_urls = { spotify: String }

              class ExternalURLs < Spotted::Internal::Type::BaseModel
                attr_reader spotify: String?

                def spotify=: (String) -> String

                def initialize: (?spotify: String) -> void

                def to_hash: -> { spotify: String }
              end

              type image = { height: Integer?, url: String, width: Integer? }

              class Image < Spotted::Internal::Type::BaseModel
                attr_accessor height: Integer?

                attr_accessor url: String

                attr_accessor width: Integer?

                def initialize: (
                  height: Integer?,
                  url: String,
                  width: Integer?
                ) -> void

                def to_hash: -> {
                  height: Integer?,
                  url: String,
                  width: Integer?
                }
              end

              type type_ = :show

              module Type
                extend Spotted::Internal::Type::Enum

                SHOW: :show

                def self?.values: -> ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::Item::Episode::Show::type_]
              end
            end

            type restrictions = { reason: String }

            class Restrictions < Spotted::Internal::Type::BaseModel
              attr_reader reason: String?

              def reason=: (String) -> String

              def initialize: (?reason: String) -> void

              def to_hash: -> { reason: String }
            end

            type resume_point =
              { fully_played: bool, resume_position_ms: Integer }

            class ResumePoint < Spotted::Internal::Type::BaseModel
              attr_reader fully_played: bool?

              def fully_played=: (bool) -> bool

              attr_reader resume_position_ms: Integer?

              def resume_position_ms=: (Integer) -> Integer

              def initialize: (
                ?fully_played: bool,
                ?resume_position_ms: Integer
              ) -> void

              def to_hash: -> {
                fully_played: bool,
                resume_position_ms: Integer
              }
            end
          end

          def self?.variants: -> ::Array[Spotted::Models::Me::PlayerGetCurrentlyPlayingResponse::item]
        end
      end
    end
  end
end
