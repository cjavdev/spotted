module Spotted
  module Models
    module Me
      type top_retrieve_response =
        {
          href: String,
          items: ::Array[Spotted::Models::Me::TopRetrieveResponse::item],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        }

      class TopRetrieveResponse < Spotted::Internal::Type::BaseModel
        attr_accessor href: String

        attr_accessor items: ::Array[Spotted::Models::Me::TopRetrieveResponse::item]

        attr_accessor limit: Integer

        attr_accessor next_: String?

        attr_accessor offset: Integer

        attr_accessor previous: String?

        attr_accessor total: Integer

        def initialize: (
          href: String,
          items: ::Array[Spotted::Models::Me::TopRetrieveResponse::item],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        ) -> void

        def to_hash: -> {
          href: String,
          items: ::Array[Spotted::Models::Me::TopRetrieveResponse::item],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        }

        type item = Spotted::ArtistObject | Spotted::TrackObject

        module Item
          extend Spotted::Internal::Type::Union

          def self?.variants: -> ::Array[Spotted::Models::Me::TopRetrieveResponse::item]
        end
      end
    end
  end
end
