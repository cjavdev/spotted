module Spotted
  module Models
    module Me
      module Player
        type queue_get_response =
          {
            currently_playing: Spotted::Models::Me::Player::QueueGetResponse::currently_playing,
            queue: ::Array[Spotted::Models::Me::Player::QueueGetResponse::queue]
          }

        class QueueGetResponse < Spotted::Internal::Type::BaseModel
          attr_reader currently_playing: Spotted::Models::Me::Player::QueueGetResponse::currently_playing?

          def currently_playing=: (
            Spotted::Models::Me::Player::QueueGetResponse::currently_playing
          ) -> Spotted::Models::Me::Player::QueueGetResponse::currently_playing

          attr_reader queue: ::Array[Spotted::Models::Me::Player::QueueGetResponse::queue]?

          def queue=: (
            ::Array[Spotted::Models::Me::Player::QueueGetResponse::queue]
          ) -> ::Array[Spotted::Models::Me::Player::QueueGetResponse::queue]

          def initialize: (
            ?currently_playing: Spotted::Models::Me::Player::QueueGetResponse::currently_playing,
            ?queue: ::Array[Spotted::Models::Me::Player::QueueGetResponse::queue]
          ) -> void

          def to_hash: -> {
            currently_playing: Spotted::Models::Me::Player::QueueGetResponse::currently_playing,
            queue: ::Array[Spotted::Models::Me::Player::QueueGetResponse::queue]
          }

          type currently_playing = Spotted::TrackObject | Spotted::EpisodeObject

          module CurrentlyPlaying
            extend Spotted::Internal::Type::Union

            def self?.variants: -> ::Array[Spotted::Models::Me::Player::QueueGetResponse::currently_playing]
          end

          type queue = Spotted::TrackObject | Spotted::EpisodeObject

          module Queue
            extend Spotted::Internal::Type::Union

            def self?.variants: -> ::Array[Spotted::Models::Me::Player::QueueGetResponse::queue]
          end
        end
      end
    end
  end
end
