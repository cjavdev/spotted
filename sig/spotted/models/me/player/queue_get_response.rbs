module Spotted
  module Models
    module Me
      module Player
        type queue_get_response =
          {
            currently_playing: Spotted::Models::Me::Player::QueueGetResponse::currently_playing,
            queue: ::Array[Spotted::Models::Me::Player::QueueGetResponse::queue]
          }

        class QueueGetResponse < Spotted::Internal::Type::BaseModel
          attr_reader currently_playing: Spotted::Models::Me::Player::QueueGetResponse::currently_playing?

          def currently_playing=: (
            Spotted::Models::Me::Player::QueueGetResponse::currently_playing
          ) -> Spotted::Models::Me::Player::QueueGetResponse::currently_playing

          attr_reader queue: ::Array[Spotted::Models::Me::Player::QueueGetResponse::queue]?

          def queue=: (
            ::Array[Spotted::Models::Me::Player::QueueGetResponse::queue]
          ) -> ::Array[Spotted::Models::Me::Player::QueueGetResponse::queue]

          def initialize: (
            ?currently_playing: Spotted::Models::Me::Player::QueueGetResponse::currently_playing,
            ?queue: ::Array[Spotted::Models::Me::Player::QueueGetResponse::queue]
          ) -> void

          def to_hash: -> {
            currently_playing: Spotted::Models::Me::Player::QueueGetResponse::currently_playing,
            queue: ::Array[Spotted::Models::Me::Player::QueueGetResponse::queue]
          }

          type currently_playing =
            Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track
            | Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode

          module CurrentlyPlaying
            extend Spotted::Internal::Type::Union

            type track =
              {
                id: String,
                album: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album,
                artists: ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Artist],
                available_markets: ::Array[String],
                disc_number: Integer,
                duration_ms: Integer,
                explicit: bool,
                external_ids: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::ExternalIDs,
                external_urls: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::ExternalURLs,
                href: String,
                is_local: bool,
                is_playable: bool,
                linked_from: top,
                name: String,
                popularity: Integer,
                preview_url: String?,
                restrictions: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Restrictions,
                track_number: Integer,
                type: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::type_,
                uri: String
              }

            class Track < Spotted::Internal::Type::BaseModel
              attr_reader id: String?

              def id=: (String) -> String

              attr_reader album: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album?

              def album=: (
                Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album
              ) -> Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album

              attr_reader artists: ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Artist]?

              def artists=: (
                ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Artist]
              ) -> ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Artist]

              attr_reader available_markets: ::Array[String]?

              def available_markets=: (::Array[String]) -> ::Array[String]

              attr_reader disc_number: Integer?

              def disc_number=: (Integer) -> Integer

              attr_reader duration_ms: Integer?

              def duration_ms=: (Integer) -> Integer

              attr_reader explicit: bool?

              def explicit=: (bool) -> bool

              attr_reader external_ids: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::ExternalIDs?

              def external_ids=: (
                Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::ExternalIDs
              ) -> Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::ExternalIDs

              attr_reader external_urls: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::ExternalURLs?

              def external_urls=: (
                Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::ExternalURLs
              ) -> Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::ExternalURLs

              attr_reader href: String?

              def href=: (String) -> String

              attr_reader is_local: bool?

              def is_local=: (bool) -> bool

              attr_reader is_playable: bool?

              def is_playable=: (bool) -> bool

              attr_reader linked_from: top?

              def linked_from=: (top) -> top

              attr_reader name: String?

              def name=: (String) -> String

              attr_reader popularity: Integer?

              def popularity=: (Integer) -> Integer

              attr_accessor preview_url: String?

              attr_reader restrictions: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Restrictions?

              def restrictions=: (
                Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Restrictions
              ) -> Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Restrictions

              attr_reader track_number: Integer?

              def track_number=: (Integer) -> Integer

              attr_reader type: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::type_?

              def type=: (
                Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::type_
              ) -> Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::type_

              attr_reader uri: String?

              def uri=: (String) -> String

              def initialize: (
                ?id: String,
                ?album: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album,
                ?artists: ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Artist],
                ?available_markets: ::Array[String],
                ?disc_number: Integer,
                ?duration_ms: Integer,
                ?explicit: bool,
                ?external_ids: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::ExternalIDs,
                ?external_urls: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::ExternalURLs,
                ?href: String,
                ?is_local: bool,
                ?is_playable: bool,
                ?linked_from: top,
                ?name: String,
                ?popularity: Integer,
                ?preview_url: String?,
                ?restrictions: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Restrictions,
                ?track_number: Integer,
                ?type: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::type_,
                ?uri: String
              ) -> void

              def to_hash: -> {
                id: String,
                album: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album,
                artists: ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Artist],
                available_markets: ::Array[String],
                disc_number: Integer,
                duration_ms: Integer,
                explicit: bool,
                external_ids: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::ExternalIDs,
                external_urls: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::ExternalURLs,
                href: String,
                is_local: bool,
                is_playable: bool,
                linked_from: top,
                name: String,
                popularity: Integer,
                preview_url: String?,
                restrictions: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Restrictions,
                track_number: Integer,
                type: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::type_,
                uri: String
              }

              type album =
                {
                  id: String,
                  album_type: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::album_type,
                  artists: ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Artist],
                  available_markets: ::Array[String],
                  external_urls: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::ExternalURLs,
                  href: String,
                  images: ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Image],
                  name: String,
                  release_date: String,
                  release_date_precision: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::release_date_precision,
                  total_tracks: Integer,
                  type: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::type_,
                  uri: String,
                  restrictions: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Restrictions
                }

              class Album < Spotted::Internal::Type::BaseModel
                attr_accessor id: String

                attr_accessor album_type: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::album_type

                attr_accessor artists: ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Artist]

                attr_accessor available_markets: ::Array[String]

                attr_accessor external_urls: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::ExternalURLs

                attr_accessor href: String

                attr_accessor images: ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Image]

                attr_accessor name: String

                attr_accessor release_date: String

                attr_accessor release_date_precision: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::release_date_precision

                attr_accessor total_tracks: Integer

                attr_accessor type: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::type_

                attr_accessor uri: String

                attr_reader restrictions: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Restrictions?

                def restrictions=: (
                  Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Restrictions
                ) -> Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Restrictions

                def initialize: (
                  id: String,
                  album_type: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::album_type,
                  artists: ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Artist],
                  available_markets: ::Array[String],
                  external_urls: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::ExternalURLs,
                  href: String,
                  images: ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Image],
                  name: String,
                  release_date: String,
                  release_date_precision: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::release_date_precision,
                  total_tracks: Integer,
                  type: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::type_,
                  uri: String,
                  ?restrictions: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Restrictions
                ) -> void

                def to_hash: -> {
                  id: String,
                  album_type: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::album_type,
                  artists: ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Artist],
                  available_markets: ::Array[String],
                  external_urls: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::ExternalURLs,
                  href: String,
                  images: ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Image],
                  name: String,
                  release_date: String,
                  release_date_precision: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::release_date_precision,
                  total_tracks: Integer,
                  type: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::type_,
                  uri: String,
                  restrictions: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Restrictions
                }

                type album_type = :album | :single | :compilation

                module AlbumType
                  extend Spotted::Internal::Type::Enum

                  ALBUM: :album
                  SINGLE: :single
                  COMPILATION: :compilation

                  def self?.values: -> ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::album_type]
                end

                type artist =
                  {
                    id: String,
                    external_urls: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Artist::ExternalURLs,
                    href: String,
                    name: String,
                    type: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Artist::type_,
                    uri: String
                  }

                class Artist < Spotted::Internal::Type::BaseModel
                  attr_reader id: String?

                  def id=: (String) -> String

                  attr_reader external_urls: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Artist::ExternalURLs?

                  def external_urls=: (
                    Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Artist::ExternalURLs
                  ) -> Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Artist::ExternalURLs

                  attr_reader href: String?

                  def href=: (String) -> String

                  attr_reader name: String?

                  def name=: (String) -> String

                  attr_reader type: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Artist::type_?

                  def type=: (
                    Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Artist::type_
                  ) -> Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Artist::type_

                  attr_reader uri: String?

                  def uri=: (String) -> String

                  def initialize: (
                    ?id: String,
                    ?external_urls: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Artist::ExternalURLs,
                    ?href: String,
                    ?name: String,
                    ?type: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Artist::type_,
                    ?uri: String
                  ) -> void

                  def to_hash: -> {
                    id: String,
                    external_urls: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Artist::ExternalURLs,
                    href: String,
                    name: String,
                    type: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Artist::type_,
                    uri: String
                  }

                  type external_urls = { spotify: String }

                  class ExternalURLs < Spotted::Internal::Type::BaseModel
                    attr_reader spotify: String?

                    def spotify=: (String) -> String

                    def initialize: (?spotify: String) -> void

                    def to_hash: -> { spotify: String }
                  end

                  type type_ = :artist

                  module Type
                    extend Spotted::Internal::Type::Enum

                    ARTIST: :artist

                    def self?.values: -> ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Artist::type_]
                  end
                end

                type external_urls = { spotify: String }

                class ExternalURLs < Spotted::Internal::Type::BaseModel
                  attr_reader spotify: String?

                  def spotify=: (String) -> String

                  def initialize: (?spotify: String) -> void

                  def to_hash: -> { spotify: String }
                end

                type image = { height: Integer?, url: String, width: Integer? }

                class Image < Spotted::Internal::Type::BaseModel
                  attr_accessor height: Integer?

                  attr_accessor url: String

                  attr_accessor width: Integer?

                  def initialize: (
                    height: Integer?,
                    url: String,
                    width: Integer?
                  ) -> void

                  def to_hash: -> {
                    height: Integer?,
                    url: String,
                    width: Integer?
                  }
                end

                type release_date_precision = :year | :month | :day

                module ReleaseDatePrecision
                  extend Spotted::Internal::Type::Enum

                  YEAR: :year
                  MONTH: :month
                  DAY: :day

                  def self?.values: -> ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::release_date_precision]
                end

                type type_ = :album

                module Type
                  extend Spotted::Internal::Type::Enum

                  ALBUM: :album

                  def self?.values: -> ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::type_]
                end

                type restrictions =
                  {
                    reason: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Restrictions::reason
                  }

                class Restrictions < Spotted::Internal::Type::BaseModel
                  attr_reader reason: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Restrictions::reason?

                  def reason=: (
                    Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Restrictions::reason
                  ) -> Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Restrictions::reason

                  def initialize: (
                    ?reason: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Restrictions::reason
                  ) -> void

                  def to_hash: -> {
                    reason: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Restrictions::reason
                  }

                  type reason = :market | :product | :explicit

                  module Reason
                    extend Spotted::Internal::Type::Enum

                    MARKET: :market
                    PRODUCT: :product
                    EXPLICIT: :explicit

                    def self?.values: -> ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Album::Restrictions::reason]
                  end
                end
              end

              type artist =
                {
                  id: String,
                  external_urls: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Artist::ExternalURLs,
                  href: String,
                  name: String,
                  type: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Artist::type_,
                  uri: String
                }

              class Artist < Spotted::Internal::Type::BaseModel
                attr_reader id: String?

                def id=: (String) -> String

                attr_reader external_urls: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Artist::ExternalURLs?

                def external_urls=: (
                  Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Artist::ExternalURLs
                ) -> Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Artist::ExternalURLs

                attr_reader href: String?

                def href=: (String) -> String

                attr_reader name: String?

                def name=: (String) -> String

                attr_reader type: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Artist::type_?

                def type=: (
                  Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Artist::type_
                ) -> Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Artist::type_

                attr_reader uri: String?

                def uri=: (String) -> String

                def initialize: (
                  ?id: String,
                  ?external_urls: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Artist::ExternalURLs,
                  ?href: String,
                  ?name: String,
                  ?type: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Artist::type_,
                  ?uri: String
                ) -> void

                def to_hash: -> {
                  id: String,
                  external_urls: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Artist::ExternalURLs,
                  href: String,
                  name: String,
                  type: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Artist::type_,
                  uri: String
                }

                type external_urls = { spotify: String }

                class ExternalURLs < Spotted::Internal::Type::BaseModel
                  attr_reader spotify: String?

                  def spotify=: (String) -> String

                  def initialize: (?spotify: String) -> void

                  def to_hash: -> { spotify: String }
                end

                type type_ = :artist

                module Type
                  extend Spotted::Internal::Type::Enum

                  ARTIST: :artist

                  def self?.values: -> ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::Artist::type_]
                end
              end

              type external_ids = { ean: String, isrc: String, upc: String }

              class ExternalIDs < Spotted::Internal::Type::BaseModel
                attr_reader ean: String?

                def ean=: (String) -> String

                attr_reader isrc: String?

                def isrc=: (String) -> String

                attr_reader upc: String?

                def upc=: (String) -> String

                def initialize: (
                  ?ean: String,
                  ?isrc: String,
                  ?upc: String
                ) -> void

                def to_hash: -> { ean: String, isrc: String, upc: String }
              end

              type external_urls = { spotify: String }

              class ExternalURLs < Spotted::Internal::Type::BaseModel
                attr_reader spotify: String?

                def spotify=: (String) -> String

                def initialize: (?spotify: String) -> void

                def to_hash: -> { spotify: String }
              end

              type restrictions = { reason: String }

              class Restrictions < Spotted::Internal::Type::BaseModel
                attr_reader reason: String?

                def reason=: (String) -> String

                def initialize: (?reason: String) -> void

                def to_hash: -> { reason: String }
              end

              type type_ = :track

              module Type
                extend Spotted::Internal::Type::Enum

                TRACK: :track

                def self?.values: -> ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Track::type_]
              end
            end

            type episode =
              {
                id: String,
                audio_preview_url: String?,
                description: String,
                duration_ms: Integer,
                explicit: bool,
                external_urls: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::ExternalURLs,
                href: String,
                html_description: String,
                images: ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Image],
                is_externally_hosted: bool,
                is_playable: bool,
                languages: ::Array[String],
                name: String,
                release_date: String,
                release_date_precision: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::release_date_precision,
                show: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Show,
                type: :episode,
                uri: String,
                language: String,
                restrictions: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Restrictions,
                resume_point: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::ResumePoint
              }

            class Episode < Spotted::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor audio_preview_url: String?

              attr_accessor description: String

              attr_accessor duration_ms: Integer

              attr_accessor explicit: bool

              attr_accessor external_urls: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::ExternalURLs

              attr_accessor href: String

              attr_accessor html_description: String

              attr_accessor images: ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Image]

              attr_accessor is_externally_hosted: bool

              attr_accessor is_playable: bool

              attr_accessor languages: ::Array[String]

              attr_accessor name: String

              attr_accessor release_date: String

              attr_accessor release_date_precision: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::release_date_precision

              attr_accessor show: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Show

              attr_accessor type: :episode

              attr_accessor uri: String

              attr_reader language: String?

              def language=: (String) -> String

              attr_reader restrictions: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Restrictions?

              def restrictions=: (
                Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Restrictions
              ) -> Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Restrictions

              attr_reader resume_point: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::ResumePoint?

              def resume_point=: (
                Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::ResumePoint
              ) -> Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::ResumePoint

              def initialize: (
                id: String,
                audio_preview_url: String?,
                description: String,
                duration_ms: Integer,
                explicit: bool,
                external_urls: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::ExternalURLs,
                href: String,
                html_description: String,
                images: ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Image],
                is_externally_hosted: bool,
                is_playable: bool,
                languages: ::Array[String],
                name: String,
                release_date: String,
                release_date_precision: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::release_date_precision,
                show: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Show,
                uri: String,
                ?language: String,
                ?restrictions: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Restrictions,
                ?resume_point: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::ResumePoint,
                ?type: :episode
              ) -> void

              def to_hash: -> {
                id: String,
                audio_preview_url: String?,
                description: String,
                duration_ms: Integer,
                explicit: bool,
                external_urls: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::ExternalURLs,
                href: String,
                html_description: String,
                images: ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Image],
                is_externally_hosted: bool,
                is_playable: bool,
                languages: ::Array[String],
                name: String,
                release_date: String,
                release_date_precision: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::release_date_precision,
                show: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Show,
                type: :episode,
                uri: String,
                language: String,
                restrictions: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Restrictions,
                resume_point: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::ResumePoint
              }

              type external_urls = { spotify: String }

              class ExternalURLs < Spotted::Internal::Type::BaseModel
                attr_reader spotify: String?

                def spotify=: (String) -> String

                def initialize: (?spotify: String) -> void

                def to_hash: -> { spotify: String }
              end

              type image = { height: Integer?, url: String, width: Integer? }

              class Image < Spotted::Internal::Type::BaseModel
                attr_accessor height: Integer?

                attr_accessor url: String

                attr_accessor width: Integer?

                def initialize: (
                  height: Integer?,
                  url: String,
                  width: Integer?
                ) -> void

                def to_hash: -> {
                  height: Integer?,
                  url: String,
                  width: Integer?
                }
              end

              type release_date_precision = :year | :month | :day

              module ReleaseDatePrecision
                extend Spotted::Internal::Type::Enum

                YEAR: :year
                MONTH: :month
                DAY: :day

                def self?.values: -> ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::release_date_precision]
              end

              type show =
                {
                  id: String,
                  available_markets: ::Array[String],
                  copyrights: ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Show::Copyright],
                  description: String,
                  explicit: bool,
                  external_urls: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Show::ExternalURLs,
                  href: String,
                  html_description: String,
                  images: ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Show::Image],
                  is_externally_hosted: bool,
                  languages: ::Array[String],
                  media_type: String,
                  name: String,
                  publisher: String,
                  total_episodes: Integer,
                  type: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Show::type_,
                  uri: String
                }

              class Show < Spotted::Internal::Type::BaseModel
                attr_accessor id: String

                attr_accessor available_markets: ::Array[String]

                attr_accessor copyrights: ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Show::Copyright]

                attr_accessor description: String

                attr_accessor explicit: bool

                attr_accessor external_urls: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Show::ExternalURLs

                attr_accessor href: String

                attr_accessor html_description: String

                attr_accessor images: ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Show::Image]

                attr_accessor is_externally_hosted: bool

                attr_accessor languages: ::Array[String]

                attr_accessor media_type: String

                attr_accessor name: String

                attr_accessor publisher: String

                attr_accessor total_episodes: Integer

                attr_accessor type: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Show::type_

                attr_accessor uri: String

                def initialize: (
                  id: String,
                  available_markets: ::Array[String],
                  copyrights: ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Show::Copyright],
                  description: String,
                  explicit: bool,
                  external_urls: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Show::ExternalURLs,
                  href: String,
                  html_description: String,
                  images: ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Show::Image],
                  is_externally_hosted: bool,
                  languages: ::Array[String],
                  media_type: String,
                  name: String,
                  publisher: String,
                  total_episodes: Integer,
                  type: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Show::type_,
                  uri: String
                ) -> void

                def to_hash: -> {
                  id: String,
                  available_markets: ::Array[String],
                  copyrights: ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Show::Copyright],
                  description: String,
                  explicit: bool,
                  external_urls: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Show::ExternalURLs,
                  href: String,
                  html_description: String,
                  images: ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Show::Image],
                  is_externally_hosted: bool,
                  languages: ::Array[String],
                  media_type: String,
                  name: String,
                  publisher: String,
                  total_episodes: Integer,
                  type: Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Show::type_,
                  uri: String
                }

                type copyright = { text: String, type: String }

                class Copyright < Spotted::Internal::Type::BaseModel
                  attr_reader text: String?

                  def text=: (String) -> String

                  attr_reader type: String?

                  def type=: (String) -> String

                  def initialize: (?text: String, ?type: String) -> void

                  def to_hash: -> { text: String, type: String }
                end

                type external_urls = { spotify: String }

                class ExternalURLs < Spotted::Internal::Type::BaseModel
                  attr_reader spotify: String?

                  def spotify=: (String) -> String

                  def initialize: (?spotify: String) -> void

                  def to_hash: -> { spotify: String }
                end

                type image = { height: Integer?, url: String, width: Integer? }

                class Image < Spotted::Internal::Type::BaseModel
                  attr_accessor height: Integer?

                  attr_accessor url: String

                  attr_accessor width: Integer?

                  def initialize: (
                    height: Integer?,
                    url: String,
                    width: Integer?
                  ) -> void

                  def to_hash: -> {
                    height: Integer?,
                    url: String,
                    width: Integer?
                  }
                end

                type type_ = :show

                module Type
                  extend Spotted::Internal::Type::Enum

                  SHOW: :show

                  def self?.values: -> ::Array[Spotted::Models::Me::Player::QueueGetResponse::CurrentlyPlaying::Episode::Show::type_]
                end
              end

              type restrictions = { reason: String }

              class Restrictions < Spotted::Internal::Type::BaseModel
                attr_reader reason: String?

                def reason=: (String) -> String

                def initialize: (?reason: String) -> void

                def to_hash: -> { reason: String }
              end

              type resume_point =
                { fully_played: bool, resume_position_ms: Integer }

              class ResumePoint < Spotted::Internal::Type::BaseModel
                attr_reader fully_played: bool?

                def fully_played=: (bool) -> bool

                attr_reader resume_position_ms: Integer?

                def resume_position_ms=: (Integer) -> Integer

                def initialize: (
                  ?fully_played: bool,
                  ?resume_position_ms: Integer
                ) -> void

                def to_hash: -> {
                  fully_played: bool,
                  resume_position_ms: Integer
                }
              end
            end

            def self?.variants: -> ::Array[Spotted::Models::Me::Player::QueueGetResponse::currently_playing]
          end

          type queue =
            Spotted::Models::Me::Player::QueueGetResponse::Queue::Track
            | Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode

          module Queue
            extend Spotted::Internal::Type::Union

            type track =
              {
                id: String,
                album: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album,
                artists: ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Artist],
                available_markets: ::Array[String],
                disc_number: Integer,
                duration_ms: Integer,
                explicit: bool,
                external_ids: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::ExternalIDs,
                external_urls: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::ExternalURLs,
                href: String,
                is_local: bool,
                is_playable: bool,
                linked_from: top,
                name: String,
                popularity: Integer,
                preview_url: String?,
                restrictions: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Restrictions,
                track_number: Integer,
                type: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::type_,
                uri: String
              }

            class Track < Spotted::Internal::Type::BaseModel
              attr_reader id: String?

              def id=: (String) -> String

              attr_reader album: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album?

              def album=: (
                Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album
              ) -> Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album

              attr_reader artists: ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Artist]?

              def artists=: (
                ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Artist]
              ) -> ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Artist]

              attr_reader available_markets: ::Array[String]?

              def available_markets=: (::Array[String]) -> ::Array[String]

              attr_reader disc_number: Integer?

              def disc_number=: (Integer) -> Integer

              attr_reader duration_ms: Integer?

              def duration_ms=: (Integer) -> Integer

              attr_reader explicit: bool?

              def explicit=: (bool) -> bool

              attr_reader external_ids: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::ExternalIDs?

              def external_ids=: (
                Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::ExternalIDs
              ) -> Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::ExternalIDs

              attr_reader external_urls: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::ExternalURLs?

              def external_urls=: (
                Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::ExternalURLs
              ) -> Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::ExternalURLs

              attr_reader href: String?

              def href=: (String) -> String

              attr_reader is_local: bool?

              def is_local=: (bool) -> bool

              attr_reader is_playable: bool?

              def is_playable=: (bool) -> bool

              attr_reader linked_from: top?

              def linked_from=: (top) -> top

              attr_reader name: String?

              def name=: (String) -> String

              attr_reader popularity: Integer?

              def popularity=: (Integer) -> Integer

              attr_accessor preview_url: String?

              attr_reader restrictions: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Restrictions?

              def restrictions=: (
                Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Restrictions
              ) -> Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Restrictions

              attr_reader track_number: Integer?

              def track_number=: (Integer) -> Integer

              attr_reader type: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::type_?

              def type=: (
                Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::type_
              ) -> Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::type_

              attr_reader uri: String?

              def uri=: (String) -> String

              def initialize: (
                ?id: String,
                ?album: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album,
                ?artists: ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Artist],
                ?available_markets: ::Array[String],
                ?disc_number: Integer,
                ?duration_ms: Integer,
                ?explicit: bool,
                ?external_ids: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::ExternalIDs,
                ?external_urls: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::ExternalURLs,
                ?href: String,
                ?is_local: bool,
                ?is_playable: bool,
                ?linked_from: top,
                ?name: String,
                ?popularity: Integer,
                ?preview_url: String?,
                ?restrictions: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Restrictions,
                ?track_number: Integer,
                ?type: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::type_,
                ?uri: String
              ) -> void

              def to_hash: -> {
                id: String,
                album: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album,
                artists: ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Artist],
                available_markets: ::Array[String],
                disc_number: Integer,
                duration_ms: Integer,
                explicit: bool,
                external_ids: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::ExternalIDs,
                external_urls: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::ExternalURLs,
                href: String,
                is_local: bool,
                is_playable: bool,
                linked_from: top,
                name: String,
                popularity: Integer,
                preview_url: String?,
                restrictions: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Restrictions,
                track_number: Integer,
                type: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::type_,
                uri: String
              }

              type album =
                {
                  id: String,
                  album_type: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::album_type,
                  artists: ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Artist],
                  available_markets: ::Array[String],
                  external_urls: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::ExternalURLs,
                  href: String,
                  images: ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Image],
                  name: String,
                  release_date: String,
                  release_date_precision: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::release_date_precision,
                  total_tracks: Integer,
                  type: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::type_,
                  uri: String,
                  restrictions: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Restrictions
                }

              class Album < Spotted::Internal::Type::BaseModel
                attr_accessor id: String

                attr_accessor album_type: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::album_type

                attr_accessor artists: ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Artist]

                attr_accessor available_markets: ::Array[String]

                attr_accessor external_urls: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::ExternalURLs

                attr_accessor href: String

                attr_accessor images: ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Image]

                attr_accessor name: String

                attr_accessor release_date: String

                attr_accessor release_date_precision: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::release_date_precision

                attr_accessor total_tracks: Integer

                attr_accessor type: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::type_

                attr_accessor uri: String

                attr_reader restrictions: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Restrictions?

                def restrictions=: (
                  Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Restrictions
                ) -> Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Restrictions

                def initialize: (
                  id: String,
                  album_type: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::album_type,
                  artists: ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Artist],
                  available_markets: ::Array[String],
                  external_urls: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::ExternalURLs,
                  href: String,
                  images: ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Image],
                  name: String,
                  release_date: String,
                  release_date_precision: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::release_date_precision,
                  total_tracks: Integer,
                  type: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::type_,
                  uri: String,
                  ?restrictions: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Restrictions
                ) -> void

                def to_hash: -> {
                  id: String,
                  album_type: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::album_type,
                  artists: ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Artist],
                  available_markets: ::Array[String],
                  external_urls: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::ExternalURLs,
                  href: String,
                  images: ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Image],
                  name: String,
                  release_date: String,
                  release_date_precision: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::release_date_precision,
                  total_tracks: Integer,
                  type: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::type_,
                  uri: String,
                  restrictions: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Restrictions
                }

                type album_type = :album | :single | :compilation

                module AlbumType
                  extend Spotted::Internal::Type::Enum

                  ALBUM: :album
                  SINGLE: :single
                  COMPILATION: :compilation

                  def self?.values: -> ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::album_type]
                end

                type artist =
                  {
                    id: String,
                    external_urls: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Artist::ExternalURLs,
                    href: String,
                    name: String,
                    type: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Artist::type_,
                    uri: String
                  }

                class Artist < Spotted::Internal::Type::BaseModel
                  attr_reader id: String?

                  def id=: (String) -> String

                  attr_reader external_urls: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Artist::ExternalURLs?

                  def external_urls=: (
                    Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Artist::ExternalURLs
                  ) -> Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Artist::ExternalURLs

                  attr_reader href: String?

                  def href=: (String) -> String

                  attr_reader name: String?

                  def name=: (String) -> String

                  attr_reader type: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Artist::type_?

                  def type=: (
                    Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Artist::type_
                  ) -> Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Artist::type_

                  attr_reader uri: String?

                  def uri=: (String) -> String

                  def initialize: (
                    ?id: String,
                    ?external_urls: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Artist::ExternalURLs,
                    ?href: String,
                    ?name: String,
                    ?type: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Artist::type_,
                    ?uri: String
                  ) -> void

                  def to_hash: -> {
                    id: String,
                    external_urls: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Artist::ExternalURLs,
                    href: String,
                    name: String,
                    type: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Artist::type_,
                    uri: String
                  }

                  type external_urls = { spotify: String }

                  class ExternalURLs < Spotted::Internal::Type::BaseModel
                    attr_reader spotify: String?

                    def spotify=: (String) -> String

                    def initialize: (?spotify: String) -> void

                    def to_hash: -> { spotify: String }
                  end

                  type type_ = :artist

                  module Type
                    extend Spotted::Internal::Type::Enum

                    ARTIST: :artist

                    def self?.values: -> ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Artist::type_]
                  end
                end

                type external_urls = { spotify: String }

                class ExternalURLs < Spotted::Internal::Type::BaseModel
                  attr_reader spotify: String?

                  def spotify=: (String) -> String

                  def initialize: (?spotify: String) -> void

                  def to_hash: -> { spotify: String }
                end

                type image = { height: Integer?, url: String, width: Integer? }

                class Image < Spotted::Internal::Type::BaseModel
                  attr_accessor height: Integer?

                  attr_accessor url: String

                  attr_accessor width: Integer?

                  def initialize: (
                    height: Integer?,
                    url: String,
                    width: Integer?
                  ) -> void

                  def to_hash: -> {
                    height: Integer?,
                    url: String,
                    width: Integer?
                  }
                end

                type release_date_precision = :year | :month | :day

                module ReleaseDatePrecision
                  extend Spotted::Internal::Type::Enum

                  YEAR: :year
                  MONTH: :month
                  DAY: :day

                  def self?.values: -> ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::release_date_precision]
                end

                type type_ = :album

                module Type
                  extend Spotted::Internal::Type::Enum

                  ALBUM: :album

                  def self?.values: -> ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::type_]
                end

                type restrictions =
                  {
                    reason: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Restrictions::reason
                  }

                class Restrictions < Spotted::Internal::Type::BaseModel
                  attr_reader reason: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Restrictions::reason?

                  def reason=: (
                    Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Restrictions::reason
                  ) -> Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Restrictions::reason

                  def initialize: (
                    ?reason: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Restrictions::reason
                  ) -> void

                  def to_hash: -> {
                    reason: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Restrictions::reason
                  }

                  type reason = :market | :product | :explicit

                  module Reason
                    extend Spotted::Internal::Type::Enum

                    MARKET: :market
                    PRODUCT: :product
                    EXPLICIT: :explicit

                    def self?.values: -> ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Album::Restrictions::reason]
                  end
                end
              end

              type artist =
                {
                  id: String,
                  external_urls: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Artist::ExternalURLs,
                  href: String,
                  name: String,
                  type: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Artist::type_,
                  uri: String
                }

              class Artist < Spotted::Internal::Type::BaseModel
                attr_reader id: String?

                def id=: (String) -> String

                attr_reader external_urls: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Artist::ExternalURLs?

                def external_urls=: (
                  Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Artist::ExternalURLs
                ) -> Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Artist::ExternalURLs

                attr_reader href: String?

                def href=: (String) -> String

                attr_reader name: String?

                def name=: (String) -> String

                attr_reader type: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Artist::type_?

                def type=: (
                  Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Artist::type_
                ) -> Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Artist::type_

                attr_reader uri: String?

                def uri=: (String) -> String

                def initialize: (
                  ?id: String,
                  ?external_urls: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Artist::ExternalURLs,
                  ?href: String,
                  ?name: String,
                  ?type: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Artist::type_,
                  ?uri: String
                ) -> void

                def to_hash: -> {
                  id: String,
                  external_urls: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Artist::ExternalURLs,
                  href: String,
                  name: String,
                  type: Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Artist::type_,
                  uri: String
                }

                type external_urls = { spotify: String }

                class ExternalURLs < Spotted::Internal::Type::BaseModel
                  attr_reader spotify: String?

                  def spotify=: (String) -> String

                  def initialize: (?spotify: String) -> void

                  def to_hash: -> { spotify: String }
                end

                type type_ = :artist

                module Type
                  extend Spotted::Internal::Type::Enum

                  ARTIST: :artist

                  def self?.values: -> ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::Artist::type_]
                end
              end

              type external_ids = { ean: String, isrc: String, upc: String }

              class ExternalIDs < Spotted::Internal::Type::BaseModel
                attr_reader ean: String?

                def ean=: (String) -> String

                attr_reader isrc: String?

                def isrc=: (String) -> String

                attr_reader upc: String?

                def upc=: (String) -> String

                def initialize: (
                  ?ean: String,
                  ?isrc: String,
                  ?upc: String
                ) -> void

                def to_hash: -> { ean: String, isrc: String, upc: String }
              end

              type external_urls = { spotify: String }

              class ExternalURLs < Spotted::Internal::Type::BaseModel
                attr_reader spotify: String?

                def spotify=: (String) -> String

                def initialize: (?spotify: String) -> void

                def to_hash: -> { spotify: String }
              end

              type restrictions = { reason: String }

              class Restrictions < Spotted::Internal::Type::BaseModel
                attr_reader reason: String?

                def reason=: (String) -> String

                def initialize: (?reason: String) -> void

                def to_hash: -> { reason: String }
              end

              type type_ = :track

              module Type
                extend Spotted::Internal::Type::Enum

                TRACK: :track

                def self?.values: -> ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Track::type_]
              end
            end

            type episode =
              {
                id: String,
                audio_preview_url: String?,
                description: String,
                duration_ms: Integer,
                explicit: bool,
                external_urls: Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::ExternalURLs,
                href: String,
                html_description: String,
                images: ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Image],
                is_externally_hosted: bool,
                is_playable: bool,
                languages: ::Array[String],
                name: String,
                release_date: String,
                release_date_precision: Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::release_date_precision,
                show: Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Show,
                type: :episode,
                uri: String,
                language: String,
                restrictions: Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Restrictions,
                resume_point: Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::ResumePoint
              }

            class Episode < Spotted::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor audio_preview_url: String?

              attr_accessor description: String

              attr_accessor duration_ms: Integer

              attr_accessor explicit: bool

              attr_accessor external_urls: Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::ExternalURLs

              attr_accessor href: String

              attr_accessor html_description: String

              attr_accessor images: ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Image]

              attr_accessor is_externally_hosted: bool

              attr_accessor is_playable: bool

              attr_accessor languages: ::Array[String]

              attr_accessor name: String

              attr_accessor release_date: String

              attr_accessor release_date_precision: Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::release_date_precision

              attr_accessor show: Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Show

              attr_accessor type: :episode

              attr_accessor uri: String

              attr_reader language: String?

              def language=: (String) -> String

              attr_reader restrictions: Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Restrictions?

              def restrictions=: (
                Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Restrictions
              ) -> Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Restrictions

              attr_reader resume_point: Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::ResumePoint?

              def resume_point=: (
                Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::ResumePoint
              ) -> Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::ResumePoint

              def initialize: (
                id: String,
                audio_preview_url: String?,
                description: String,
                duration_ms: Integer,
                explicit: bool,
                external_urls: Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::ExternalURLs,
                href: String,
                html_description: String,
                images: ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Image],
                is_externally_hosted: bool,
                is_playable: bool,
                languages: ::Array[String],
                name: String,
                release_date: String,
                release_date_precision: Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::release_date_precision,
                show: Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Show,
                uri: String,
                ?language: String,
                ?restrictions: Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Restrictions,
                ?resume_point: Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::ResumePoint,
                ?type: :episode
              ) -> void

              def to_hash: -> {
                id: String,
                audio_preview_url: String?,
                description: String,
                duration_ms: Integer,
                explicit: bool,
                external_urls: Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::ExternalURLs,
                href: String,
                html_description: String,
                images: ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Image],
                is_externally_hosted: bool,
                is_playable: bool,
                languages: ::Array[String],
                name: String,
                release_date: String,
                release_date_precision: Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::release_date_precision,
                show: Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Show,
                type: :episode,
                uri: String,
                language: String,
                restrictions: Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Restrictions,
                resume_point: Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::ResumePoint
              }

              type external_urls = { spotify: String }

              class ExternalURLs < Spotted::Internal::Type::BaseModel
                attr_reader spotify: String?

                def spotify=: (String) -> String

                def initialize: (?spotify: String) -> void

                def to_hash: -> { spotify: String }
              end

              type image = { height: Integer?, url: String, width: Integer? }

              class Image < Spotted::Internal::Type::BaseModel
                attr_accessor height: Integer?

                attr_accessor url: String

                attr_accessor width: Integer?

                def initialize: (
                  height: Integer?,
                  url: String,
                  width: Integer?
                ) -> void

                def to_hash: -> {
                  height: Integer?,
                  url: String,
                  width: Integer?
                }
              end

              type release_date_precision = :year | :month | :day

              module ReleaseDatePrecision
                extend Spotted::Internal::Type::Enum

                YEAR: :year
                MONTH: :month
                DAY: :day

                def self?.values: -> ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::release_date_precision]
              end

              type show =
                {
                  id: String,
                  available_markets: ::Array[String],
                  copyrights: ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Show::Copyright],
                  description: String,
                  explicit: bool,
                  external_urls: Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Show::ExternalURLs,
                  href: String,
                  html_description: String,
                  images: ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Show::Image],
                  is_externally_hosted: bool,
                  languages: ::Array[String],
                  media_type: String,
                  name: String,
                  publisher: String,
                  total_episodes: Integer,
                  type: Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Show::type_,
                  uri: String
                }

              class Show < Spotted::Internal::Type::BaseModel
                attr_accessor id: String

                attr_accessor available_markets: ::Array[String]

                attr_accessor copyrights: ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Show::Copyright]

                attr_accessor description: String

                attr_accessor explicit: bool

                attr_accessor external_urls: Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Show::ExternalURLs

                attr_accessor href: String

                attr_accessor html_description: String

                attr_accessor images: ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Show::Image]

                attr_accessor is_externally_hosted: bool

                attr_accessor languages: ::Array[String]

                attr_accessor media_type: String

                attr_accessor name: String

                attr_accessor publisher: String

                attr_accessor total_episodes: Integer

                attr_accessor type: Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Show::type_

                attr_accessor uri: String

                def initialize: (
                  id: String,
                  available_markets: ::Array[String],
                  copyrights: ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Show::Copyright],
                  description: String,
                  explicit: bool,
                  external_urls: Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Show::ExternalURLs,
                  href: String,
                  html_description: String,
                  images: ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Show::Image],
                  is_externally_hosted: bool,
                  languages: ::Array[String],
                  media_type: String,
                  name: String,
                  publisher: String,
                  total_episodes: Integer,
                  type: Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Show::type_,
                  uri: String
                ) -> void

                def to_hash: -> {
                  id: String,
                  available_markets: ::Array[String],
                  copyrights: ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Show::Copyright],
                  description: String,
                  explicit: bool,
                  external_urls: Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Show::ExternalURLs,
                  href: String,
                  html_description: String,
                  images: ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Show::Image],
                  is_externally_hosted: bool,
                  languages: ::Array[String],
                  media_type: String,
                  name: String,
                  publisher: String,
                  total_episodes: Integer,
                  type: Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Show::type_,
                  uri: String
                }

                type copyright = { text: String, type: String }

                class Copyright < Spotted::Internal::Type::BaseModel
                  attr_reader text: String?

                  def text=: (String) -> String

                  attr_reader type: String?

                  def type=: (String) -> String

                  def initialize: (?text: String, ?type: String) -> void

                  def to_hash: -> { text: String, type: String }
                end

                type external_urls = { spotify: String }

                class ExternalURLs < Spotted::Internal::Type::BaseModel
                  attr_reader spotify: String?

                  def spotify=: (String) -> String

                  def initialize: (?spotify: String) -> void

                  def to_hash: -> { spotify: String }
                end

                type image = { height: Integer?, url: String, width: Integer? }

                class Image < Spotted::Internal::Type::BaseModel
                  attr_accessor height: Integer?

                  attr_accessor url: String

                  attr_accessor width: Integer?

                  def initialize: (
                    height: Integer?,
                    url: String,
                    width: Integer?
                  ) -> void

                  def to_hash: -> {
                    height: Integer?,
                    url: String,
                    width: Integer?
                  }
                end

                type type_ = :show

                module Type
                  extend Spotted::Internal::Type::Enum

                  SHOW: :show

                  def self?.values: -> ::Array[Spotted::Models::Me::Player::QueueGetResponse::Queue::Episode::Show::type_]
                end
              end

              type restrictions = { reason: String }

              class Restrictions < Spotted::Internal::Type::BaseModel
                attr_reader reason: String?

                def reason=: (String) -> String

                def initialize: (?reason: String) -> void

                def to_hash: -> { reason: String }
              end

              type resume_point =
                { fully_played: bool, resume_position_ms: Integer }

              class ResumePoint < Spotted::Internal::Type::BaseModel
                attr_reader fully_played: bool?

                def fully_played=: (bool) -> bool

                attr_reader resume_position_ms: Integer?

                def resume_position_ms=: (Integer) -> Integer

                def initialize: (
                  ?fully_played: bool,
                  ?resume_position_ms: Integer
                ) -> void

                def to_hash: -> {
                  fully_played: bool,
                  resume_position_ms: Integer
                }
              end
            end

            def self?.variants: -> ::Array[Spotted::Models::Me::Player::QueueGetResponse::queue]
          end
        end
      end
    end
  end
end
