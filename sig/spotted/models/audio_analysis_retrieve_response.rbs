module Spotted
  module Models
    type audio_analysis_retrieve_response =
      {
        bars: ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Bar],
        beats: ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Beat],
        meta: Spotted::Models::AudioAnalysisRetrieveResponse::Meta,
        sections: ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Section],
        segments: ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Segment],
        tatums: ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Tatum],
        track: Spotted::Models::AudioAnalysisRetrieveResponse::Track
      }

    class AudioAnalysisRetrieveResponse < Spotted::Internal::Type::BaseModel
      attr_reader bars: ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Bar]?

      def bars=: (
        ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Bar]
      ) -> ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Bar]

      attr_reader beats: ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Beat]?

      def beats=: (
        ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Beat]
      ) -> ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Beat]

      attr_reader meta: Spotted::Models::AudioAnalysisRetrieveResponse::Meta?

      def meta=: (
        Spotted::Models::AudioAnalysisRetrieveResponse::Meta
      ) -> Spotted::Models::AudioAnalysisRetrieveResponse::Meta

      attr_reader sections: ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Section]?

      def sections=: (
        ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Section]
      ) -> ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Section]

      attr_reader segments: ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Segment]?

      def segments=: (
        ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Segment]
      ) -> ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Segment]

      attr_reader tatums: ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Tatum]?

      def tatums=: (
        ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Tatum]
      ) -> ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Tatum]

      attr_reader track: Spotted::Models::AudioAnalysisRetrieveResponse::Track?

      def track=: (
        Spotted::Models::AudioAnalysisRetrieveResponse::Track
      ) -> Spotted::Models::AudioAnalysisRetrieveResponse::Track

      def initialize: (
        ?bars: ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Bar],
        ?beats: ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Beat],
        ?meta: Spotted::Models::AudioAnalysisRetrieveResponse::Meta,
        ?sections: ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Section],
        ?segments: ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Segment],
        ?tatums: ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Tatum],
        ?track: Spotted::Models::AudioAnalysisRetrieveResponse::Track
      ) -> void

      def to_hash: -> {
        bars: ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Bar],
        beats: ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Beat],
        meta: Spotted::Models::AudioAnalysisRetrieveResponse::Meta,
        sections: ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Section],
        segments: ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Segment],
        tatums: ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Tatum],
        track: Spotted::Models::AudioAnalysisRetrieveResponse::Track
      }

      type bar = { confidence: Float, duration: Float, start: Float }

      class Bar < Spotted::Internal::Type::BaseModel
        attr_reader confidence: Float?

        def confidence=: (Float) -> Float

        attr_reader duration: Float?

        def duration=: (Float) -> Float

        attr_reader start: Float?

        def start=: (Float) -> Float

        def initialize: (
          ?confidence: Float,
          ?duration: Float,
          ?start: Float
        ) -> void

        def to_hash: -> { confidence: Float, duration: Float, start: Float }
      end

      type beat = { confidence: Float, duration: Float, start: Float }

      class Beat < Spotted::Internal::Type::BaseModel
        attr_reader confidence: Float?

        def confidence=: (Float) -> Float

        attr_reader duration: Float?

        def duration=: (Float) -> Float

        attr_reader start: Float?

        def start=: (Float) -> Float

        def initialize: (
          ?confidence: Float,
          ?duration: Float,
          ?start: Float
        ) -> void

        def to_hash: -> { confidence: Float, duration: Float, start: Float }
      end

      type meta =
        {
          analysis_time: Float,
          analyzer_version: String,
          detailed_status: String,
          input_process: String,
          platform: String,
          status_code: Integer,
          timestamp: Integer
        }

      class Meta < Spotted::Internal::Type::BaseModel
        attr_reader analysis_time: Float?

        def analysis_time=: (Float) -> Float

        attr_reader analyzer_version: String?

        def analyzer_version=: (String) -> String

        attr_reader detailed_status: String?

        def detailed_status=: (String) -> String

        attr_reader input_process: String?

        def input_process=: (String) -> String

        attr_reader platform: String?

        def platform=: (String) -> String

        attr_reader status_code: Integer?

        def status_code=: (Integer) -> Integer

        attr_reader timestamp: Integer?

        def timestamp=: (Integer) -> Integer

        def initialize: (
          ?analysis_time: Float,
          ?analyzer_version: String,
          ?detailed_status: String,
          ?input_process: String,
          ?platform: String,
          ?status_code: Integer,
          ?timestamp: Integer
        ) -> void

        def to_hash: -> {
          analysis_time: Float,
          analyzer_version: String,
          detailed_status: String,
          input_process: String,
          platform: String,
          status_code: Integer,
          timestamp: Integer
        }
      end

      type section =
        {
          confidence: Float,
          duration: Float,
          key: Integer,
          key_confidence: Float,
          loudness: Float,
          mode: Spotted::Models::AudioAnalysisRetrieveResponse::Section::mode,
          mode_confidence: Float,
          start: Float,
          tempo: Float,
          tempo_confidence: Float,
          time_signature: Integer,
          time_signature_confidence: Float
        }

      class Section < Spotted::Internal::Type::BaseModel
        attr_reader confidence: Float?

        def confidence=: (Float) -> Float

        attr_reader duration: Float?

        def duration=: (Float) -> Float

        attr_reader key: Integer?

        def key=: (Integer) -> Integer

        attr_reader key_confidence: Float?

        def key_confidence=: (Float) -> Float

        attr_reader loudness: Float?

        def loudness=: (Float) -> Float

        attr_reader mode: Spotted::Models::AudioAnalysisRetrieveResponse::Section::mode?

        def mode=: (
          Spotted::Models::AudioAnalysisRetrieveResponse::Section::mode
        ) -> Spotted::Models::AudioAnalysisRetrieveResponse::Section::mode

        attr_reader mode_confidence: Float?

        def mode_confidence=: (Float) -> Float

        attr_reader start: Float?

        def start=: (Float) -> Float

        attr_reader tempo: Float?

        def tempo=: (Float) -> Float

        attr_reader tempo_confidence: Float?

        def tempo_confidence=: (Float) -> Float

        attr_reader time_signature: Integer?

        def time_signature=: (Integer) -> Integer

        attr_reader time_signature_confidence: Float?

        def time_signature_confidence=: (Float) -> Float

        def initialize: (
          ?confidence: Float,
          ?duration: Float,
          ?key: Integer,
          ?key_confidence: Float,
          ?loudness: Float,
          ?mode: Spotted::Models::AudioAnalysisRetrieveResponse::Section::mode,
          ?mode_confidence: Float,
          ?start: Float,
          ?tempo: Float,
          ?tempo_confidence: Float,
          ?time_signature: Integer,
          ?time_signature_confidence: Float
        ) -> void

        def to_hash: -> {
          confidence: Float,
          duration: Float,
          key: Integer,
          key_confidence: Float,
          loudness: Float,
          mode: Spotted::Models::AudioAnalysisRetrieveResponse::Section::mode,
          mode_confidence: Float,
          start: Float,
          tempo: Float,
          tempo_confidence: Float,
          time_signature: Integer,
          time_signature_confidence: Float
        }

        type mode = Float

        module Mode
          extend Spotted::Internal::Type::Enum

          MINUS_1: -1
          MODE_0: 0
          MODE_1: 1

          def self?.values: -> ::Array[Spotted::Models::AudioAnalysisRetrieveResponse::Section::mode]
        end
      end

      type segment =
        {
          confidence: Float,
          duration: Float,
          loudness_end: Float,
          loudness_max: Float,
          loudness_max_time: Float,
          loudness_start: Float,
          pitches: ::Array[Float],
          start: Float,
          timbre: ::Array[Float]
        }

      class Segment < Spotted::Internal::Type::BaseModel
        attr_reader confidence: Float?

        def confidence=: (Float) -> Float

        attr_reader duration: Float?

        def duration=: (Float) -> Float

        attr_reader loudness_end: Float?

        def loudness_end=: (Float) -> Float

        attr_reader loudness_max: Float?

        def loudness_max=: (Float) -> Float

        attr_reader loudness_max_time: Float?

        def loudness_max_time=: (Float) -> Float

        attr_reader loudness_start: Float?

        def loudness_start=: (Float) -> Float

        attr_reader pitches: ::Array[Float]?

        def pitches=: (::Array[Float]) -> ::Array[Float]

        attr_reader start: Float?

        def start=: (Float) -> Float

        attr_reader timbre: ::Array[Float]?

        def timbre=: (::Array[Float]) -> ::Array[Float]

        def initialize: (
          ?confidence: Float,
          ?duration: Float,
          ?loudness_end: Float,
          ?loudness_max: Float,
          ?loudness_max_time: Float,
          ?loudness_start: Float,
          ?pitches: ::Array[Float],
          ?start: Float,
          ?timbre: ::Array[Float]
        ) -> void

        def to_hash: -> {
          confidence: Float,
          duration: Float,
          loudness_end: Float,
          loudness_max: Float,
          loudness_max_time: Float,
          loudness_start: Float,
          pitches: ::Array[Float],
          start: Float,
          timbre: ::Array[Float]
        }
      end

      type tatum = { confidence: Float, duration: Float, start: Float }

      class Tatum < Spotted::Internal::Type::BaseModel
        attr_reader confidence: Float?

        def confidence=: (Float) -> Float

        attr_reader duration: Float?

        def duration=: (Float) -> Float

        attr_reader start: Float?

        def start=: (Float) -> Float

        def initialize: (
          ?confidence: Float,
          ?duration: Float,
          ?start: Float
        ) -> void

        def to_hash: -> { confidence: Float, duration: Float, start: Float }
      end

      type track =
        {
          analysis_channels: Integer,
          analysis_sample_rate: Integer,
          code_version: Float,
          codestring: String,
          duration: Float,
          echoprint_version: Float,
          echoprintstring: String,
          end_of_fade_in: Float,
          key: Integer,
          key_confidence: Float,
          loudness: Float,
          mode: Integer,
          mode_confidence: Float,
          num_samples: Integer,
          offset_seconds: Integer,
          rhythm_version: Float,
          rhythmstring: String,
          :sample_md5 => String,
          start_of_fade_out: Float,
          synch_version: Float,
          synchstring: String,
          tempo: Float,
          tempo_confidence: Float,
          time_signature: Integer,
          time_signature_confidence: Float,
          window_seconds: Integer
        }

      class Track < Spotted::Internal::Type::BaseModel
        attr_reader analysis_channels: Integer?

        def analysis_channels=: (Integer) -> Integer

        attr_reader analysis_sample_rate: Integer?

        def analysis_sample_rate=: (Integer) -> Integer

        attr_reader code_version: Float?

        def code_version=: (Float) -> Float

        attr_reader codestring: String?

        def codestring=: (String) -> String

        attr_reader duration: Float?

        def duration=: (Float) -> Float

        attr_reader echoprint_version: Float?

        def echoprint_version=: (Float) -> Float

        attr_reader echoprintstring: String?

        def echoprintstring=: (String) -> String

        attr_reader end_of_fade_in: Float?

        def end_of_fade_in=: (Float) -> Float

        attr_reader key: Integer?

        def key=: (Integer) -> Integer

        attr_reader key_confidence: Float?

        def key_confidence=: (Float) -> Float

        attr_reader loudness: Float?

        def loudness=: (Float) -> Float

        attr_reader mode: Integer?

        def mode=: (Integer) -> Integer

        attr_reader mode_confidence: Float?

        def mode_confidence=: (Float) -> Float

        attr_reader num_samples: Integer?

        def num_samples=: (Integer) -> Integer

        attr_reader offset_seconds: Integer?

        def offset_seconds=: (Integer) -> Integer

        attr_reader rhythm_version: Float?

        def rhythm_version=: (Float) -> Float

        attr_reader rhythmstring: String?

        def rhythmstring=: (String) -> String

        attr_reader sample_md5: String?

        def sample_md5=: (String) -> String

        attr_reader start_of_fade_out: Float?

        def start_of_fade_out=: (Float) -> Float

        attr_reader synch_version: Float?

        def synch_version=: (Float) -> Float

        attr_reader synchstring: String?

        def synchstring=: (String) -> String

        attr_reader tempo: Float?

        def tempo=: (Float) -> Float

        attr_reader tempo_confidence: Float?

        def tempo_confidence=: (Float) -> Float

        attr_reader time_signature: Integer?

        def time_signature=: (Integer) -> Integer

        attr_reader time_signature_confidence: Float?

        def time_signature_confidence=: (Float) -> Float

        attr_reader window_seconds: Integer?

        def window_seconds=: (Integer) -> Integer

        def initialize: (
          ?analysis_channels: Integer,
          ?analysis_sample_rate: Integer,
          ?code_version: Float,
          ?codestring: String,
          ?duration: Float,
          ?echoprint_version: Float,
          ?echoprintstring: String,
          ?end_of_fade_in: Float,
          ?key: Integer,
          ?key_confidence: Float,
          ?loudness: Float,
          ?mode: Integer,
          ?mode_confidence: Float,
          ?num_samples: Integer,
          ?offset_seconds: Integer,
          ?rhythm_version: Float,
          ?rhythmstring: String,
          ?sample_md5: String,
          ?start_of_fade_out: Float,
          ?synch_version: Float,
          ?synchstring: String,
          ?tempo: Float,
          ?tempo_confidence: Float,
          ?time_signature: Integer,
          ?time_signature_confidence: Float,
          ?window_seconds: Integer
        ) -> void

        def to_hash: -> {
          analysis_channels: Integer,
          analysis_sample_rate: Integer,
          code_version: Float,
          codestring: String,
          duration: Float,
          echoprint_version: Float,
          echoprintstring: String,
          end_of_fade_in: Float,
          key: Integer,
          key_confidence: Float,
          loudness: Float,
          mode: Integer,
          mode_confidence: Float,
          num_samples: Integer,
          offset_seconds: Integer,
          rhythm_version: Float,
          rhythmstring: String,
          :sample_md5 => String,
          start_of_fade_out: Float,
          synch_version: Float,
          synchstring: String,
          tempo: Float,
          tempo_confidence: Float,
          time_signature: Integer,
          time_signature_confidence: Float,
          window_seconds: Integer
        }
      end
    end
  end
end
