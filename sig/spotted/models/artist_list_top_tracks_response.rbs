module Spotted
  module Models
    type artist_list_top_tracks_response =
      { tracks: ::Array[Spotted::Models::ArtistListTopTracksResponse::Track] }

    class ArtistListTopTracksResponse < Spotted::Internal::Type::BaseModel
      attr_accessor tracks: ::Array[Spotted::Models::ArtistListTopTracksResponse::Track]

      def initialize: (
        tracks: ::Array[Spotted::Models::ArtistListTopTracksResponse::Track]
      ) -> void

      def to_hash: -> {
        tracks: ::Array[Spotted::Models::ArtistListTopTracksResponse::Track]
      }

      type track =
        {
          id: String,
          album: Spotted::Models::ArtistListTopTracksResponse::Track::Album,
          artists: ::Array[Spotted::Models::ArtistListTopTracksResponse::Track::Artist],
          available_markets: ::Array[String],
          disc_number: Integer,
          duration_ms: Integer,
          explicit: bool,
          external_ids: Spotted::Models::ArtistListTopTracksResponse::Track::ExternalIDs,
          external_urls: Spotted::Models::ArtistListTopTracksResponse::Track::ExternalURLs,
          href: String,
          is_local: bool,
          is_playable: bool,
          linked_from: top,
          name: String,
          popularity: Integer,
          preview_url: String?,
          restrictions: Spotted::Models::ArtistListTopTracksResponse::Track::Restrictions,
          track_number: Integer,
          type: Spotted::Models::ArtistListTopTracksResponse::Track::type_,
          uri: String
        }

      class Track < Spotted::Internal::Type::BaseModel
        attr_reader id: String?

        def id=: (String) -> String

        attr_reader album: Spotted::Models::ArtistListTopTracksResponse::Track::Album?

        def album=: (
          Spotted::Models::ArtistListTopTracksResponse::Track::Album
        ) -> Spotted::Models::ArtistListTopTracksResponse::Track::Album

        attr_reader artists: ::Array[Spotted::Models::ArtistListTopTracksResponse::Track::Artist]?

        def artists=: (
          ::Array[Spotted::Models::ArtistListTopTracksResponse::Track::Artist]
        ) -> ::Array[Spotted::Models::ArtistListTopTracksResponse::Track::Artist]

        attr_reader available_markets: ::Array[String]?

        def available_markets=: (::Array[String]) -> ::Array[String]

        attr_reader disc_number: Integer?

        def disc_number=: (Integer) -> Integer

        attr_reader duration_ms: Integer?

        def duration_ms=: (Integer) -> Integer

        attr_reader explicit: bool?

        def explicit=: (bool) -> bool

        attr_reader external_ids: Spotted::Models::ArtistListTopTracksResponse::Track::ExternalIDs?

        def external_ids=: (
          Spotted::Models::ArtistListTopTracksResponse::Track::ExternalIDs
        ) -> Spotted::Models::ArtistListTopTracksResponse::Track::ExternalIDs

        attr_reader external_urls: Spotted::Models::ArtistListTopTracksResponse::Track::ExternalURLs?

        def external_urls=: (
          Spotted::Models::ArtistListTopTracksResponse::Track::ExternalURLs
        ) -> Spotted::Models::ArtistListTopTracksResponse::Track::ExternalURLs

        attr_reader href: String?

        def href=: (String) -> String

        attr_reader is_local: bool?

        def is_local=: (bool) -> bool

        attr_reader is_playable: bool?

        def is_playable=: (bool) -> bool

        attr_reader linked_from: top?

        def linked_from=: (top) -> top

        attr_reader name: String?

        def name=: (String) -> String

        attr_reader popularity: Integer?

        def popularity=: (Integer) -> Integer

        attr_accessor preview_url: String?

        attr_reader restrictions: Spotted::Models::ArtistListTopTracksResponse::Track::Restrictions?

        def restrictions=: (
          Spotted::Models::ArtistListTopTracksResponse::Track::Restrictions
        ) -> Spotted::Models::ArtistListTopTracksResponse::Track::Restrictions

        attr_reader track_number: Integer?

        def track_number=: (Integer) -> Integer

        attr_reader type: Spotted::Models::ArtistListTopTracksResponse::Track::type_?

        def type=: (
          Spotted::Models::ArtistListTopTracksResponse::Track::type_
        ) -> Spotted::Models::ArtistListTopTracksResponse::Track::type_

        attr_reader uri: String?

        def uri=: (String) -> String

        def initialize: (
          ?id: String,
          ?album: Spotted::Models::ArtistListTopTracksResponse::Track::Album,
          ?artists: ::Array[Spotted::Models::ArtistListTopTracksResponse::Track::Artist],
          ?available_markets: ::Array[String],
          ?disc_number: Integer,
          ?duration_ms: Integer,
          ?explicit: bool,
          ?external_ids: Spotted::Models::ArtistListTopTracksResponse::Track::ExternalIDs,
          ?external_urls: Spotted::Models::ArtistListTopTracksResponse::Track::ExternalURLs,
          ?href: String,
          ?is_local: bool,
          ?is_playable: bool,
          ?linked_from: top,
          ?name: String,
          ?popularity: Integer,
          ?preview_url: String?,
          ?restrictions: Spotted::Models::ArtistListTopTracksResponse::Track::Restrictions,
          ?track_number: Integer,
          ?type: Spotted::Models::ArtistListTopTracksResponse::Track::type_,
          ?uri: String
        ) -> void

        def to_hash: -> {
          id: String,
          album: Spotted::Models::ArtistListTopTracksResponse::Track::Album,
          artists: ::Array[Spotted::Models::ArtistListTopTracksResponse::Track::Artist],
          available_markets: ::Array[String],
          disc_number: Integer,
          duration_ms: Integer,
          explicit: bool,
          external_ids: Spotted::Models::ArtistListTopTracksResponse::Track::ExternalIDs,
          external_urls: Spotted::Models::ArtistListTopTracksResponse::Track::ExternalURLs,
          href: String,
          is_local: bool,
          is_playable: bool,
          linked_from: top,
          name: String,
          popularity: Integer,
          preview_url: String?,
          restrictions: Spotted::Models::ArtistListTopTracksResponse::Track::Restrictions,
          track_number: Integer,
          type: Spotted::Models::ArtistListTopTracksResponse::Track::type_,
          uri: String
        }

        type album =
          {
            id: String,
            album_type: Spotted::Models::ArtistListTopTracksResponse::Track::Album::album_type,
            artists: ::Array[Spotted::Models::ArtistListTopTracksResponse::Track::Album::Artist],
            available_markets: ::Array[String],
            external_urls: Spotted::Models::ArtistListTopTracksResponse::Track::Album::ExternalURLs,
            href: String,
            images: ::Array[Spotted::Models::ArtistListTopTracksResponse::Track::Album::Image],
            name: String,
            release_date: String,
            release_date_precision: Spotted::Models::ArtistListTopTracksResponse::Track::Album::release_date_precision,
            total_tracks: Integer,
            type: Spotted::Models::ArtistListTopTracksResponse::Track::Album::type_,
            uri: String,
            restrictions: Spotted::Models::ArtistListTopTracksResponse::Track::Album::Restrictions
          }

        class Album < Spotted::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor album_type: Spotted::Models::ArtistListTopTracksResponse::Track::Album::album_type

          attr_accessor artists: ::Array[Spotted::Models::ArtistListTopTracksResponse::Track::Album::Artist]

          attr_accessor available_markets: ::Array[String]

          attr_accessor external_urls: Spotted::Models::ArtistListTopTracksResponse::Track::Album::ExternalURLs

          attr_accessor href: String

          attr_accessor images: ::Array[Spotted::Models::ArtistListTopTracksResponse::Track::Album::Image]

          attr_accessor name: String

          attr_accessor release_date: String

          attr_accessor release_date_precision: Spotted::Models::ArtistListTopTracksResponse::Track::Album::release_date_precision

          attr_accessor total_tracks: Integer

          attr_accessor type: Spotted::Models::ArtistListTopTracksResponse::Track::Album::type_

          attr_accessor uri: String

          attr_reader restrictions: Spotted::Models::ArtistListTopTracksResponse::Track::Album::Restrictions?

          def restrictions=: (
            Spotted::Models::ArtistListTopTracksResponse::Track::Album::Restrictions
          ) -> Spotted::Models::ArtistListTopTracksResponse::Track::Album::Restrictions

          def initialize: (
            id: String,
            album_type: Spotted::Models::ArtistListTopTracksResponse::Track::Album::album_type,
            artists: ::Array[Spotted::Models::ArtistListTopTracksResponse::Track::Album::Artist],
            available_markets: ::Array[String],
            external_urls: Spotted::Models::ArtistListTopTracksResponse::Track::Album::ExternalURLs,
            href: String,
            images: ::Array[Spotted::Models::ArtistListTopTracksResponse::Track::Album::Image],
            name: String,
            release_date: String,
            release_date_precision: Spotted::Models::ArtistListTopTracksResponse::Track::Album::release_date_precision,
            total_tracks: Integer,
            type: Spotted::Models::ArtistListTopTracksResponse::Track::Album::type_,
            uri: String,
            ?restrictions: Spotted::Models::ArtistListTopTracksResponse::Track::Album::Restrictions
          ) -> void

          def to_hash: -> {
            id: String,
            album_type: Spotted::Models::ArtistListTopTracksResponse::Track::Album::album_type,
            artists: ::Array[Spotted::Models::ArtistListTopTracksResponse::Track::Album::Artist],
            available_markets: ::Array[String],
            external_urls: Spotted::Models::ArtistListTopTracksResponse::Track::Album::ExternalURLs,
            href: String,
            images: ::Array[Spotted::Models::ArtistListTopTracksResponse::Track::Album::Image],
            name: String,
            release_date: String,
            release_date_precision: Spotted::Models::ArtistListTopTracksResponse::Track::Album::release_date_precision,
            total_tracks: Integer,
            type: Spotted::Models::ArtistListTopTracksResponse::Track::Album::type_,
            uri: String,
            restrictions: Spotted::Models::ArtistListTopTracksResponse::Track::Album::Restrictions
          }

          type album_type = :album | :single | :compilation

          module AlbumType
            extend Spotted::Internal::Type::Enum

            ALBUM: :album
            SINGLE: :single
            COMPILATION: :compilation

            def self?.values: -> ::Array[Spotted::Models::ArtistListTopTracksResponse::Track::Album::album_type]
          end

          type artist =
            {
              id: String,
              external_urls: Spotted::Models::ArtistListTopTracksResponse::Track::Album::Artist::ExternalURLs,
              href: String,
              name: String,
              type: Spotted::Models::ArtistListTopTracksResponse::Track::Album::Artist::type_,
              uri: String
            }

          class Artist < Spotted::Internal::Type::BaseModel
            attr_reader id: String?

            def id=: (String) -> String

            attr_reader external_urls: Spotted::Models::ArtistListTopTracksResponse::Track::Album::Artist::ExternalURLs?

            def external_urls=: (
              Spotted::Models::ArtistListTopTracksResponse::Track::Album::Artist::ExternalURLs
            ) -> Spotted::Models::ArtistListTopTracksResponse::Track::Album::Artist::ExternalURLs

            attr_reader href: String?

            def href=: (String) -> String

            attr_reader name: String?

            def name=: (String) -> String

            attr_reader type: Spotted::Models::ArtistListTopTracksResponse::Track::Album::Artist::type_?

            def type=: (
              Spotted::Models::ArtistListTopTracksResponse::Track::Album::Artist::type_
            ) -> Spotted::Models::ArtistListTopTracksResponse::Track::Album::Artist::type_

            attr_reader uri: String?

            def uri=: (String) -> String

            def initialize: (
              ?id: String,
              ?external_urls: Spotted::Models::ArtistListTopTracksResponse::Track::Album::Artist::ExternalURLs,
              ?href: String,
              ?name: String,
              ?type: Spotted::Models::ArtistListTopTracksResponse::Track::Album::Artist::type_,
              ?uri: String
            ) -> void

            def to_hash: -> {
              id: String,
              external_urls: Spotted::Models::ArtistListTopTracksResponse::Track::Album::Artist::ExternalURLs,
              href: String,
              name: String,
              type: Spotted::Models::ArtistListTopTracksResponse::Track::Album::Artist::type_,
              uri: String
            }

            type external_urls = { spotify: String }

            class ExternalURLs < Spotted::Internal::Type::BaseModel
              attr_reader spotify: String?

              def spotify=: (String) -> String

              def initialize: (?spotify: String) -> void

              def to_hash: -> { spotify: String }
            end

            type type_ = :artist

            module Type
              extend Spotted::Internal::Type::Enum

              ARTIST: :artist

              def self?.values: -> ::Array[Spotted::Models::ArtistListTopTracksResponse::Track::Album::Artist::type_]
            end
          end

          type external_urls = { spotify: String }

          class ExternalURLs < Spotted::Internal::Type::BaseModel
            attr_reader spotify: String?

            def spotify=: (String) -> String

            def initialize: (?spotify: String) -> void

            def to_hash: -> { spotify: String }
          end

          type image = { height: Integer?, url: String, width: Integer? }

          class Image < Spotted::Internal::Type::BaseModel
            attr_accessor height: Integer?

            attr_accessor url: String

            attr_accessor width: Integer?

            def initialize: (
              height: Integer?,
              url: String,
              width: Integer?
            ) -> void

            def to_hash: -> { height: Integer?, url: String, width: Integer? }
          end

          type release_date_precision = :year | :month | :day

          module ReleaseDatePrecision
            extend Spotted::Internal::Type::Enum

            YEAR: :year
            MONTH: :month
            DAY: :day

            def self?.values: -> ::Array[Spotted::Models::ArtistListTopTracksResponse::Track::Album::release_date_precision]
          end

          type type_ = :album

          module Type
            extend Spotted::Internal::Type::Enum

            ALBUM: :album

            def self?.values: -> ::Array[Spotted::Models::ArtistListTopTracksResponse::Track::Album::type_]
          end

          type restrictions =
            {
              reason: Spotted::Models::ArtistListTopTracksResponse::Track::Album::Restrictions::reason
            }

          class Restrictions < Spotted::Internal::Type::BaseModel
            attr_reader reason: Spotted::Models::ArtistListTopTracksResponse::Track::Album::Restrictions::reason?

            def reason=: (
              Spotted::Models::ArtistListTopTracksResponse::Track::Album::Restrictions::reason
            ) -> Spotted::Models::ArtistListTopTracksResponse::Track::Album::Restrictions::reason

            def initialize: (
              ?reason: Spotted::Models::ArtistListTopTracksResponse::Track::Album::Restrictions::reason
            ) -> void

            def to_hash: -> {
              reason: Spotted::Models::ArtistListTopTracksResponse::Track::Album::Restrictions::reason
            }

            type reason = :market | :product | :explicit

            module Reason
              extend Spotted::Internal::Type::Enum

              MARKET: :market
              PRODUCT: :product
              EXPLICIT: :explicit

              def self?.values: -> ::Array[Spotted::Models::ArtistListTopTracksResponse::Track::Album::Restrictions::reason]
            end
          end
        end

        type artist =
          {
            id: String,
            external_urls: Spotted::Models::ArtistListTopTracksResponse::Track::Artist::ExternalURLs,
            href: String,
            name: String,
            type: Spotted::Models::ArtistListTopTracksResponse::Track::Artist::type_,
            uri: String
          }

        class Artist < Spotted::Internal::Type::BaseModel
          attr_reader id: String?

          def id=: (String) -> String

          attr_reader external_urls: Spotted::Models::ArtistListTopTracksResponse::Track::Artist::ExternalURLs?

          def external_urls=: (
            Spotted::Models::ArtistListTopTracksResponse::Track::Artist::ExternalURLs
          ) -> Spotted::Models::ArtistListTopTracksResponse::Track::Artist::ExternalURLs

          attr_reader href: String?

          def href=: (String) -> String

          attr_reader name: String?

          def name=: (String) -> String

          attr_reader type: Spotted::Models::ArtistListTopTracksResponse::Track::Artist::type_?

          def type=: (
            Spotted::Models::ArtistListTopTracksResponse::Track::Artist::type_
          ) -> Spotted::Models::ArtistListTopTracksResponse::Track::Artist::type_

          attr_reader uri: String?

          def uri=: (String) -> String

          def initialize: (
            ?id: String,
            ?external_urls: Spotted::Models::ArtistListTopTracksResponse::Track::Artist::ExternalURLs,
            ?href: String,
            ?name: String,
            ?type: Spotted::Models::ArtistListTopTracksResponse::Track::Artist::type_,
            ?uri: String
          ) -> void

          def to_hash: -> {
            id: String,
            external_urls: Spotted::Models::ArtistListTopTracksResponse::Track::Artist::ExternalURLs,
            href: String,
            name: String,
            type: Spotted::Models::ArtistListTopTracksResponse::Track::Artist::type_,
            uri: String
          }

          type external_urls = { spotify: String }

          class ExternalURLs < Spotted::Internal::Type::BaseModel
            attr_reader spotify: String?

            def spotify=: (String) -> String

            def initialize: (?spotify: String) -> void

            def to_hash: -> { spotify: String }
          end

          type type_ = :artist

          module Type
            extend Spotted::Internal::Type::Enum

            ARTIST: :artist

            def self?.values: -> ::Array[Spotted::Models::ArtistListTopTracksResponse::Track::Artist::type_]
          end
        end

        type external_ids = { ean: String, isrc: String, upc: String }

        class ExternalIDs < Spotted::Internal::Type::BaseModel
          attr_reader ean: String?

          def ean=: (String) -> String

          attr_reader isrc: String?

          def isrc=: (String) -> String

          attr_reader upc: String?

          def upc=: (String) -> String

          def initialize: (?ean: String, ?isrc: String, ?upc: String) -> void

          def to_hash: -> { ean: String, isrc: String, upc: String }
        end

        type external_urls = { spotify: String }

        class ExternalURLs < Spotted::Internal::Type::BaseModel
          attr_reader spotify: String?

          def spotify=: (String) -> String

          def initialize: (?spotify: String) -> void

          def to_hash: -> { spotify: String }
        end

        type restrictions = { reason: String }

        class Restrictions < Spotted::Internal::Type::BaseModel
          attr_reader reason: String?

          def reason=: (String) -> String

          def initialize: (?reason: String) -> void

          def to_hash: -> { reason: String }
        end

        type type_ = :track

        module Type
          extend Spotted::Internal::Type::Enum

          TRACK: :track

          def self?.values: -> ::Array[Spotted::Models::ArtistListTopTracksResponse::Track::type_]
        end
      end
    end
  end
end
