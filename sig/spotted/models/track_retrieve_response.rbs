module Spotted
  module Models
    type track_retrieve_response =
      {
        id: String,
        album: Spotted::Models::TrackRetrieveResponse::Album,
        artists: ::Array[Spotted::Models::TrackRetrieveResponse::Artist],
        available_markets: ::Array[String],
        disc_number: Integer,
        duration_ms: Integer,
        explicit: bool,
        external_ids: Spotted::Models::TrackRetrieveResponse::ExternalIDs,
        external_urls: Spotted::Models::TrackRetrieveResponse::ExternalURLs,
        href: String,
        is_local: bool,
        is_playable: bool,
        linked_from: top,
        name: String,
        popularity: Integer,
        preview_url: String?,
        restrictions: Spotted::Models::TrackRetrieveResponse::Restrictions,
        track_number: Integer,
        type: Spotted::Models::TrackRetrieveResponse::type_,
        uri: String
      }

    class TrackRetrieveResponse < Spotted::Internal::Type::BaseModel
      attr_reader id: String?

      def id=: (String) -> String

      attr_reader album: Spotted::Models::TrackRetrieveResponse::Album?

      def album=: (
        Spotted::Models::TrackRetrieveResponse::Album
      ) -> Spotted::Models::TrackRetrieveResponse::Album

      attr_reader artists: ::Array[Spotted::Models::TrackRetrieveResponse::Artist]?

      def artists=: (
        ::Array[Spotted::Models::TrackRetrieveResponse::Artist]
      ) -> ::Array[Spotted::Models::TrackRetrieveResponse::Artist]

      attr_reader available_markets: ::Array[String]?

      def available_markets=: (::Array[String]) -> ::Array[String]

      attr_reader disc_number: Integer?

      def disc_number=: (Integer) -> Integer

      attr_reader duration_ms: Integer?

      def duration_ms=: (Integer) -> Integer

      attr_reader explicit: bool?

      def explicit=: (bool) -> bool

      attr_reader external_ids: Spotted::Models::TrackRetrieveResponse::ExternalIDs?

      def external_ids=: (
        Spotted::Models::TrackRetrieveResponse::ExternalIDs
      ) -> Spotted::Models::TrackRetrieveResponse::ExternalIDs

      attr_reader external_urls: Spotted::Models::TrackRetrieveResponse::ExternalURLs?

      def external_urls=: (
        Spotted::Models::TrackRetrieveResponse::ExternalURLs
      ) -> Spotted::Models::TrackRetrieveResponse::ExternalURLs

      attr_reader href: String?

      def href=: (String) -> String

      attr_reader is_local: bool?

      def is_local=: (bool) -> bool

      attr_reader is_playable: bool?

      def is_playable=: (bool) -> bool

      attr_reader linked_from: top?

      def linked_from=: (top) -> top

      attr_reader name: String?

      def name=: (String) -> String

      attr_reader popularity: Integer?

      def popularity=: (Integer) -> Integer

      attr_accessor preview_url: String?

      attr_reader restrictions: Spotted::Models::TrackRetrieveResponse::Restrictions?

      def restrictions=: (
        Spotted::Models::TrackRetrieveResponse::Restrictions
      ) -> Spotted::Models::TrackRetrieveResponse::Restrictions

      attr_reader track_number: Integer?

      def track_number=: (Integer) -> Integer

      attr_reader type: Spotted::Models::TrackRetrieveResponse::type_?

      def type=: (
        Spotted::Models::TrackRetrieveResponse::type_
      ) -> Spotted::Models::TrackRetrieveResponse::type_

      attr_reader uri: String?

      def uri=: (String) -> String

      def initialize: (
        ?id: String,
        ?album: Spotted::Models::TrackRetrieveResponse::Album,
        ?artists: ::Array[Spotted::Models::TrackRetrieveResponse::Artist],
        ?available_markets: ::Array[String],
        ?disc_number: Integer,
        ?duration_ms: Integer,
        ?explicit: bool,
        ?external_ids: Spotted::Models::TrackRetrieveResponse::ExternalIDs,
        ?external_urls: Spotted::Models::TrackRetrieveResponse::ExternalURLs,
        ?href: String,
        ?is_local: bool,
        ?is_playable: bool,
        ?linked_from: top,
        ?name: String,
        ?popularity: Integer,
        ?preview_url: String?,
        ?restrictions: Spotted::Models::TrackRetrieveResponse::Restrictions,
        ?track_number: Integer,
        ?type: Spotted::Models::TrackRetrieveResponse::type_,
        ?uri: String
      ) -> void

      def to_hash: -> {
        id: String,
        album: Spotted::Models::TrackRetrieveResponse::Album,
        artists: ::Array[Spotted::Models::TrackRetrieveResponse::Artist],
        available_markets: ::Array[String],
        disc_number: Integer,
        duration_ms: Integer,
        explicit: bool,
        external_ids: Spotted::Models::TrackRetrieveResponse::ExternalIDs,
        external_urls: Spotted::Models::TrackRetrieveResponse::ExternalURLs,
        href: String,
        is_local: bool,
        is_playable: bool,
        linked_from: top,
        name: String,
        popularity: Integer,
        preview_url: String?,
        restrictions: Spotted::Models::TrackRetrieveResponse::Restrictions,
        track_number: Integer,
        type: Spotted::Models::TrackRetrieveResponse::type_,
        uri: String
      }

      type album =
        {
          id: String,
          album_type: Spotted::Models::TrackRetrieveResponse::Album::album_type,
          artists: ::Array[Spotted::Models::TrackRetrieveResponse::Album::Artist],
          available_markets: ::Array[String],
          external_urls: Spotted::Models::TrackRetrieveResponse::Album::ExternalURLs,
          href: String,
          images: ::Array[Spotted::Models::TrackRetrieveResponse::Album::Image],
          name: String,
          release_date: String,
          release_date_precision: Spotted::Models::TrackRetrieveResponse::Album::release_date_precision,
          total_tracks: Integer,
          type: Spotted::Models::TrackRetrieveResponse::Album::type_,
          uri: String,
          restrictions: Spotted::Models::TrackRetrieveResponse::Album::Restrictions
        }

      class Album < Spotted::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor album_type: Spotted::Models::TrackRetrieveResponse::Album::album_type

        attr_accessor artists: ::Array[Spotted::Models::TrackRetrieveResponse::Album::Artist]

        attr_accessor available_markets: ::Array[String]

        attr_accessor external_urls: Spotted::Models::TrackRetrieveResponse::Album::ExternalURLs

        attr_accessor href: String

        attr_accessor images: ::Array[Spotted::Models::TrackRetrieveResponse::Album::Image]

        attr_accessor name: String

        attr_accessor release_date: String

        attr_accessor release_date_precision: Spotted::Models::TrackRetrieveResponse::Album::release_date_precision

        attr_accessor total_tracks: Integer

        attr_accessor type: Spotted::Models::TrackRetrieveResponse::Album::type_

        attr_accessor uri: String

        attr_reader restrictions: Spotted::Models::TrackRetrieveResponse::Album::Restrictions?

        def restrictions=: (
          Spotted::Models::TrackRetrieveResponse::Album::Restrictions
        ) -> Spotted::Models::TrackRetrieveResponse::Album::Restrictions

        def initialize: (
          id: String,
          album_type: Spotted::Models::TrackRetrieveResponse::Album::album_type,
          artists: ::Array[Spotted::Models::TrackRetrieveResponse::Album::Artist],
          available_markets: ::Array[String],
          external_urls: Spotted::Models::TrackRetrieveResponse::Album::ExternalURLs,
          href: String,
          images: ::Array[Spotted::Models::TrackRetrieveResponse::Album::Image],
          name: String,
          release_date: String,
          release_date_precision: Spotted::Models::TrackRetrieveResponse::Album::release_date_precision,
          total_tracks: Integer,
          type: Spotted::Models::TrackRetrieveResponse::Album::type_,
          uri: String,
          ?restrictions: Spotted::Models::TrackRetrieveResponse::Album::Restrictions
        ) -> void

        def to_hash: -> {
          id: String,
          album_type: Spotted::Models::TrackRetrieveResponse::Album::album_type,
          artists: ::Array[Spotted::Models::TrackRetrieveResponse::Album::Artist],
          available_markets: ::Array[String],
          external_urls: Spotted::Models::TrackRetrieveResponse::Album::ExternalURLs,
          href: String,
          images: ::Array[Spotted::Models::TrackRetrieveResponse::Album::Image],
          name: String,
          release_date: String,
          release_date_precision: Spotted::Models::TrackRetrieveResponse::Album::release_date_precision,
          total_tracks: Integer,
          type: Spotted::Models::TrackRetrieveResponse::Album::type_,
          uri: String,
          restrictions: Spotted::Models::TrackRetrieveResponse::Album::Restrictions
        }

        type album_type = :album | :single | :compilation

        module AlbumType
          extend Spotted::Internal::Type::Enum

          ALBUM: :album
          SINGLE: :single
          COMPILATION: :compilation

          def self?.values: -> ::Array[Spotted::Models::TrackRetrieveResponse::Album::album_type]
        end

        type artist =
          {
            id: String,
            external_urls: Spotted::Models::TrackRetrieveResponse::Album::Artist::ExternalURLs,
            href: String,
            name: String,
            type: Spotted::Models::TrackRetrieveResponse::Album::Artist::type_,
            uri: String
          }

        class Artist < Spotted::Internal::Type::BaseModel
          attr_reader id: String?

          def id=: (String) -> String

          attr_reader external_urls: Spotted::Models::TrackRetrieveResponse::Album::Artist::ExternalURLs?

          def external_urls=: (
            Spotted::Models::TrackRetrieveResponse::Album::Artist::ExternalURLs
          ) -> Spotted::Models::TrackRetrieveResponse::Album::Artist::ExternalURLs

          attr_reader href: String?

          def href=: (String) -> String

          attr_reader name: String?

          def name=: (String) -> String

          attr_reader type: Spotted::Models::TrackRetrieveResponse::Album::Artist::type_?

          def type=: (
            Spotted::Models::TrackRetrieveResponse::Album::Artist::type_
          ) -> Spotted::Models::TrackRetrieveResponse::Album::Artist::type_

          attr_reader uri: String?

          def uri=: (String) -> String

          def initialize: (
            ?id: String,
            ?external_urls: Spotted::Models::TrackRetrieveResponse::Album::Artist::ExternalURLs,
            ?href: String,
            ?name: String,
            ?type: Spotted::Models::TrackRetrieveResponse::Album::Artist::type_,
            ?uri: String
          ) -> void

          def to_hash: -> {
            id: String,
            external_urls: Spotted::Models::TrackRetrieveResponse::Album::Artist::ExternalURLs,
            href: String,
            name: String,
            type: Spotted::Models::TrackRetrieveResponse::Album::Artist::type_,
            uri: String
          }

          type external_urls = { spotify: String }

          class ExternalURLs < Spotted::Internal::Type::BaseModel
            attr_reader spotify: String?

            def spotify=: (String) -> String

            def initialize: (?spotify: String) -> void

            def to_hash: -> { spotify: String }
          end

          type type_ = :artist

          module Type
            extend Spotted::Internal::Type::Enum

            ARTIST: :artist

            def self?.values: -> ::Array[Spotted::Models::TrackRetrieveResponse::Album::Artist::type_]
          end
        end

        type external_urls = { spotify: String }

        class ExternalURLs < Spotted::Internal::Type::BaseModel
          attr_reader spotify: String?

          def spotify=: (String) -> String

          def initialize: (?spotify: String) -> void

          def to_hash: -> { spotify: String }
        end

        type image = { height: Integer?, url: String, width: Integer? }

        class Image < Spotted::Internal::Type::BaseModel
          attr_accessor height: Integer?

          attr_accessor url: String

          attr_accessor width: Integer?

          def initialize: (
            height: Integer?,
            url: String,
            width: Integer?
          ) -> void

          def to_hash: -> { height: Integer?, url: String, width: Integer? }
        end

        type release_date_precision = :year | :month | :day

        module ReleaseDatePrecision
          extend Spotted::Internal::Type::Enum

          YEAR: :year
          MONTH: :month
          DAY: :day

          def self?.values: -> ::Array[Spotted::Models::TrackRetrieveResponse::Album::release_date_precision]
        end

        type type_ = :album

        module Type
          extend Spotted::Internal::Type::Enum

          ALBUM: :album

          def self?.values: -> ::Array[Spotted::Models::TrackRetrieveResponse::Album::type_]
        end

        type restrictions =
          {
            reason: Spotted::Models::TrackRetrieveResponse::Album::Restrictions::reason
          }

        class Restrictions < Spotted::Internal::Type::BaseModel
          attr_reader reason: Spotted::Models::TrackRetrieveResponse::Album::Restrictions::reason?

          def reason=: (
            Spotted::Models::TrackRetrieveResponse::Album::Restrictions::reason
          ) -> Spotted::Models::TrackRetrieveResponse::Album::Restrictions::reason

          def initialize: (
            ?reason: Spotted::Models::TrackRetrieveResponse::Album::Restrictions::reason
          ) -> void

          def to_hash: -> {
            reason: Spotted::Models::TrackRetrieveResponse::Album::Restrictions::reason
          }

          type reason = :market | :product | :explicit

          module Reason
            extend Spotted::Internal::Type::Enum

            MARKET: :market
            PRODUCT: :product
            EXPLICIT: :explicit

            def self?.values: -> ::Array[Spotted::Models::TrackRetrieveResponse::Album::Restrictions::reason]
          end
        end
      end

      type artist =
        {
          id: String,
          external_urls: Spotted::Models::TrackRetrieveResponse::Artist::ExternalURLs,
          href: String,
          name: String,
          type: Spotted::Models::TrackRetrieveResponse::Artist::type_,
          uri: String
        }

      class Artist < Spotted::Internal::Type::BaseModel
        attr_reader id: String?

        def id=: (String) -> String

        attr_reader external_urls: Spotted::Models::TrackRetrieveResponse::Artist::ExternalURLs?

        def external_urls=: (
          Spotted::Models::TrackRetrieveResponse::Artist::ExternalURLs
        ) -> Spotted::Models::TrackRetrieveResponse::Artist::ExternalURLs

        attr_reader href: String?

        def href=: (String) -> String

        attr_reader name: String?

        def name=: (String) -> String

        attr_reader type: Spotted::Models::TrackRetrieveResponse::Artist::type_?

        def type=: (
          Spotted::Models::TrackRetrieveResponse::Artist::type_
        ) -> Spotted::Models::TrackRetrieveResponse::Artist::type_

        attr_reader uri: String?

        def uri=: (String) -> String

        def initialize: (
          ?id: String,
          ?external_urls: Spotted::Models::TrackRetrieveResponse::Artist::ExternalURLs,
          ?href: String,
          ?name: String,
          ?type: Spotted::Models::TrackRetrieveResponse::Artist::type_,
          ?uri: String
        ) -> void

        def to_hash: -> {
          id: String,
          external_urls: Spotted::Models::TrackRetrieveResponse::Artist::ExternalURLs,
          href: String,
          name: String,
          type: Spotted::Models::TrackRetrieveResponse::Artist::type_,
          uri: String
        }

        type external_urls = { spotify: String }

        class ExternalURLs < Spotted::Internal::Type::BaseModel
          attr_reader spotify: String?

          def spotify=: (String) -> String

          def initialize: (?spotify: String) -> void

          def to_hash: -> { spotify: String }
        end

        type type_ = :artist

        module Type
          extend Spotted::Internal::Type::Enum

          ARTIST: :artist

          def self?.values: -> ::Array[Spotted::Models::TrackRetrieveResponse::Artist::type_]
        end
      end

      type external_ids = { ean: String, isrc: String, upc: String }

      class ExternalIDs < Spotted::Internal::Type::BaseModel
        attr_reader ean: String?

        def ean=: (String) -> String

        attr_reader isrc: String?

        def isrc=: (String) -> String

        attr_reader upc: String?

        def upc=: (String) -> String

        def initialize: (?ean: String, ?isrc: String, ?upc: String) -> void

        def to_hash: -> { ean: String, isrc: String, upc: String }
      end

      type external_urls = { spotify: String }

      class ExternalURLs < Spotted::Internal::Type::BaseModel
        attr_reader spotify: String?

        def spotify=: (String) -> String

        def initialize: (?spotify: String) -> void

        def to_hash: -> { spotify: String }
      end

      type restrictions = { reason: String }

      class Restrictions < Spotted::Internal::Type::BaseModel
        attr_reader reason: String?

        def reason=: (String) -> String

        def initialize: (?reason: String) -> void

        def to_hash: -> { reason: String }
      end

      type type_ = :track

      module Type
        extend Spotted::Internal::Type::Enum

        TRACK: :track

        def self?.values: -> ::Array[Spotted::Models::TrackRetrieveResponse::type_]
      end
    end
  end
end
