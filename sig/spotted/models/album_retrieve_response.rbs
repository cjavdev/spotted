module Spotted
  module Models
    type album_retrieve_response =
      {
        id: String,
        album_type: Spotted::Models::AlbumRetrieveResponse::album_type,
        available_markets: ::Array[String],
        external_urls: Spotted::Models::AlbumRetrieveResponse::ExternalURLs,
        href: String,
        images: ::Array[Spotted::Models::AlbumRetrieveResponse::Image],
        name: String,
        release_date: String,
        release_date_precision: Spotted::Models::AlbumRetrieveResponse::release_date_precision,
        total_tracks: Integer,
        type: Spotted::Models::AlbumRetrieveResponse::type_,
        uri: String,
        artists: ::Array[Spotted::Models::AlbumRetrieveResponse::Artist],
        copyrights: ::Array[Spotted::Models::AlbumRetrieveResponse::Copyright],
        external_ids: Spotted::Models::AlbumRetrieveResponse::ExternalIDs,
        genres: ::Array[String],
        label: String,
        popularity: Integer,
        restrictions: Spotted::Models::AlbumRetrieveResponse::Restrictions,
        tracks: Spotted::Models::AlbumRetrieveResponse::Tracks
      }

    class AlbumRetrieveResponse < Spotted::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor album_type: Spotted::Models::AlbumRetrieveResponse::album_type

      attr_accessor available_markets: ::Array[String]

      attr_accessor external_urls: Spotted::Models::AlbumRetrieveResponse::ExternalURLs

      attr_accessor href: String

      attr_accessor images: ::Array[Spotted::Models::AlbumRetrieveResponse::Image]

      attr_accessor name: String

      attr_accessor release_date: String

      attr_accessor release_date_precision: Spotted::Models::AlbumRetrieveResponse::release_date_precision

      attr_accessor total_tracks: Integer

      attr_accessor type: Spotted::Models::AlbumRetrieveResponse::type_

      attr_accessor uri: String

      attr_reader artists: ::Array[Spotted::Models::AlbumRetrieveResponse::Artist]?

      def artists=: (
        ::Array[Spotted::Models::AlbumRetrieveResponse::Artist]
      ) -> ::Array[Spotted::Models::AlbumRetrieveResponse::Artist]

      attr_reader copyrights: ::Array[Spotted::Models::AlbumRetrieveResponse::Copyright]?

      def copyrights=: (
        ::Array[Spotted::Models::AlbumRetrieveResponse::Copyright]
      ) -> ::Array[Spotted::Models::AlbumRetrieveResponse::Copyright]

      attr_reader external_ids: Spotted::Models::AlbumRetrieveResponse::ExternalIDs?

      def external_ids=: (
        Spotted::Models::AlbumRetrieveResponse::ExternalIDs
      ) -> Spotted::Models::AlbumRetrieveResponse::ExternalIDs

      attr_reader genres: ::Array[String]?

      def genres=: (::Array[String]) -> ::Array[String]

      attr_reader label: String?

      def label=: (String) -> String

      attr_reader popularity: Integer?

      def popularity=: (Integer) -> Integer

      attr_reader restrictions: Spotted::Models::AlbumRetrieveResponse::Restrictions?

      def restrictions=: (
        Spotted::Models::AlbumRetrieveResponse::Restrictions
      ) -> Spotted::Models::AlbumRetrieveResponse::Restrictions

      attr_reader tracks: Spotted::Models::AlbumRetrieveResponse::Tracks?

      def tracks=: (
        Spotted::Models::AlbumRetrieveResponse::Tracks
      ) -> Spotted::Models::AlbumRetrieveResponse::Tracks

      def initialize: (
        id: String,
        album_type: Spotted::Models::AlbumRetrieveResponse::album_type,
        available_markets: ::Array[String],
        external_urls: Spotted::Models::AlbumRetrieveResponse::ExternalURLs,
        href: String,
        images: ::Array[Spotted::Models::AlbumRetrieveResponse::Image],
        name: String,
        release_date: String,
        release_date_precision: Spotted::Models::AlbumRetrieveResponse::release_date_precision,
        total_tracks: Integer,
        type: Spotted::Models::AlbumRetrieveResponse::type_,
        uri: String,
        ?artists: ::Array[Spotted::Models::AlbumRetrieveResponse::Artist],
        ?copyrights: ::Array[Spotted::Models::AlbumRetrieveResponse::Copyright],
        ?external_ids: Spotted::Models::AlbumRetrieveResponse::ExternalIDs,
        ?genres: ::Array[String],
        ?label: String,
        ?popularity: Integer,
        ?restrictions: Spotted::Models::AlbumRetrieveResponse::Restrictions,
        ?tracks: Spotted::Models::AlbumRetrieveResponse::Tracks
      ) -> void

      def to_hash: -> {
        id: String,
        album_type: Spotted::Models::AlbumRetrieveResponse::album_type,
        available_markets: ::Array[String],
        external_urls: Spotted::Models::AlbumRetrieveResponse::ExternalURLs,
        href: String,
        images: ::Array[Spotted::Models::AlbumRetrieveResponse::Image],
        name: String,
        release_date: String,
        release_date_precision: Spotted::Models::AlbumRetrieveResponse::release_date_precision,
        total_tracks: Integer,
        type: Spotted::Models::AlbumRetrieveResponse::type_,
        uri: String,
        artists: ::Array[Spotted::Models::AlbumRetrieveResponse::Artist],
        copyrights: ::Array[Spotted::Models::AlbumRetrieveResponse::Copyright],
        external_ids: Spotted::Models::AlbumRetrieveResponse::ExternalIDs,
        genres: ::Array[String],
        label: String,
        popularity: Integer,
        restrictions: Spotted::Models::AlbumRetrieveResponse::Restrictions,
        tracks: Spotted::Models::AlbumRetrieveResponse::Tracks
      }

      type album_type = :album | :single | :compilation

      module AlbumType
        extend Spotted::Internal::Type::Enum

        ALBUM: :album
        SINGLE: :single
        COMPILATION: :compilation

        def self?.values: -> ::Array[Spotted::Models::AlbumRetrieveResponse::album_type]
      end

      type external_urls = { spotify: String }

      class ExternalURLs < Spotted::Internal::Type::BaseModel
        attr_reader spotify: String?

        def spotify=: (String) -> String

        def initialize: (?spotify: String) -> void

        def to_hash: -> { spotify: String }
      end

      type image = { height: Integer?, url: String, width: Integer? }

      class Image < Spotted::Internal::Type::BaseModel
        attr_accessor height: Integer?

        attr_accessor url: String

        attr_accessor width: Integer?

        def initialize: (height: Integer?, url: String, width: Integer?) -> void

        def to_hash: -> { height: Integer?, url: String, width: Integer? }
      end

      type release_date_precision = :year | :month | :day

      module ReleaseDatePrecision
        extend Spotted::Internal::Type::Enum

        YEAR: :year
        MONTH: :month
        DAY: :day

        def self?.values: -> ::Array[Spotted::Models::AlbumRetrieveResponse::release_date_precision]
      end

      type type_ = :album

      module Type
        extend Spotted::Internal::Type::Enum

        ALBUM: :album

        def self?.values: -> ::Array[Spotted::Models::AlbumRetrieveResponse::type_]
      end

      type artist =
        {
          id: String,
          external_urls: Spotted::Models::AlbumRetrieveResponse::Artist::ExternalURLs,
          href: String,
          name: String,
          type: Spotted::Models::AlbumRetrieveResponse::Artist::type_,
          uri: String
        }

      class Artist < Spotted::Internal::Type::BaseModel
        attr_reader id: String?

        def id=: (String) -> String

        attr_reader external_urls: Spotted::Models::AlbumRetrieveResponse::Artist::ExternalURLs?

        def external_urls=: (
          Spotted::Models::AlbumRetrieveResponse::Artist::ExternalURLs
        ) -> Spotted::Models::AlbumRetrieveResponse::Artist::ExternalURLs

        attr_reader href: String?

        def href=: (String) -> String

        attr_reader name: String?

        def name=: (String) -> String

        attr_reader type: Spotted::Models::AlbumRetrieveResponse::Artist::type_?

        def type=: (
          Spotted::Models::AlbumRetrieveResponse::Artist::type_
        ) -> Spotted::Models::AlbumRetrieveResponse::Artist::type_

        attr_reader uri: String?

        def uri=: (String) -> String

        def initialize: (
          ?id: String,
          ?external_urls: Spotted::Models::AlbumRetrieveResponse::Artist::ExternalURLs,
          ?href: String,
          ?name: String,
          ?type: Spotted::Models::AlbumRetrieveResponse::Artist::type_,
          ?uri: String
        ) -> void

        def to_hash: -> {
          id: String,
          external_urls: Spotted::Models::AlbumRetrieveResponse::Artist::ExternalURLs,
          href: String,
          name: String,
          type: Spotted::Models::AlbumRetrieveResponse::Artist::type_,
          uri: String
        }

        type external_urls = { spotify: String }

        class ExternalURLs < Spotted::Internal::Type::BaseModel
          attr_reader spotify: String?

          def spotify=: (String) -> String

          def initialize: (?spotify: String) -> void

          def to_hash: -> { spotify: String }
        end

        type type_ = :artist

        module Type
          extend Spotted::Internal::Type::Enum

          ARTIST: :artist

          def self?.values: -> ::Array[Spotted::Models::AlbumRetrieveResponse::Artist::type_]
        end
      end

      type copyright = { text: String, type: String }

      class Copyright < Spotted::Internal::Type::BaseModel
        attr_reader text: String?

        def text=: (String) -> String

        attr_reader type: String?

        def type=: (String) -> String

        def initialize: (?text: String, ?type: String) -> void

        def to_hash: -> { text: String, type: String }
      end

      type external_ids = { ean: String, isrc: String, upc: String }

      class ExternalIDs < Spotted::Internal::Type::BaseModel
        attr_reader ean: String?

        def ean=: (String) -> String

        attr_reader isrc: String?

        def isrc=: (String) -> String

        attr_reader upc: String?

        def upc=: (String) -> String

        def initialize: (?ean: String, ?isrc: String, ?upc: String) -> void

        def to_hash: -> { ean: String, isrc: String, upc: String }
      end

      type restrictions =
        { reason: Spotted::Models::AlbumRetrieveResponse::Restrictions::reason }

      class Restrictions < Spotted::Internal::Type::BaseModel
        attr_reader reason: Spotted::Models::AlbumRetrieveResponse::Restrictions::reason?

        def reason=: (
          Spotted::Models::AlbumRetrieveResponse::Restrictions::reason
        ) -> Spotted::Models::AlbumRetrieveResponse::Restrictions::reason

        def initialize: (
          ?reason: Spotted::Models::AlbumRetrieveResponse::Restrictions::reason
        ) -> void

        def to_hash: -> {
          reason: Spotted::Models::AlbumRetrieveResponse::Restrictions::reason
        }

        type reason = :market | :product | :explicit

        module Reason
          extend Spotted::Internal::Type::Enum

          MARKET: :market
          PRODUCT: :product
          EXPLICIT: :explicit

          def self?.values: -> ::Array[Spotted::Models::AlbumRetrieveResponse::Restrictions::reason]
        end
      end

      type tracks =
        {
          href: String,
          items: ::Array[Spotted::Models::AlbumRetrieveResponse::Tracks::Item],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        }

      class Tracks < Spotted::Internal::Type::BaseModel
        attr_accessor href: String

        attr_accessor items: ::Array[Spotted::Models::AlbumRetrieveResponse::Tracks::Item]

        attr_accessor limit: Integer

        attr_accessor next_: String?

        attr_accessor offset: Integer

        attr_accessor previous: String?

        attr_accessor total: Integer

        def initialize: (
          href: String,
          items: ::Array[Spotted::Models::AlbumRetrieveResponse::Tracks::Item],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        ) -> void

        def to_hash: -> {
          href: String,
          items: ::Array[Spotted::Models::AlbumRetrieveResponse::Tracks::Item],
          limit: Integer,
          next_: String?,
          offset: Integer,
          previous: String?,
          total: Integer
        }

        type item =
          {
            id: String,
            artists: ::Array[Spotted::Models::AlbumRetrieveResponse::Tracks::Item::Artist],
            available_markets: ::Array[String],
            disc_number: Integer,
            duration_ms: Integer,
            explicit: bool,
            external_urls: Spotted::Models::AlbumRetrieveResponse::Tracks::Item::ExternalURLs,
            href: String,
            is_local: bool,
            is_playable: bool,
            linked_from: Spotted::Models::AlbumRetrieveResponse::Tracks::Item::LinkedFrom,
            name: String,
            preview_url: String?,
            restrictions: Spotted::Models::AlbumRetrieveResponse::Tracks::Item::Restrictions,
            track_number: Integer,
            type: String,
            uri: String
          }

        class Item < Spotted::Internal::Type::BaseModel
          attr_reader id: String?

          def id=: (String) -> String

          attr_reader artists: ::Array[Spotted::Models::AlbumRetrieveResponse::Tracks::Item::Artist]?

          def artists=: (
            ::Array[Spotted::Models::AlbumRetrieveResponse::Tracks::Item::Artist]
          ) -> ::Array[Spotted::Models::AlbumRetrieveResponse::Tracks::Item::Artist]

          attr_reader available_markets: ::Array[String]?

          def available_markets=: (::Array[String]) -> ::Array[String]

          attr_reader disc_number: Integer?

          def disc_number=: (Integer) -> Integer

          attr_reader duration_ms: Integer?

          def duration_ms=: (Integer) -> Integer

          attr_reader explicit: bool?

          def explicit=: (bool) -> bool

          attr_reader external_urls: Spotted::Models::AlbumRetrieveResponse::Tracks::Item::ExternalURLs?

          def external_urls=: (
            Spotted::Models::AlbumRetrieveResponse::Tracks::Item::ExternalURLs
          ) -> Spotted::Models::AlbumRetrieveResponse::Tracks::Item::ExternalURLs

          attr_reader href: String?

          def href=: (String) -> String

          attr_reader is_local: bool?

          def is_local=: (bool) -> bool

          attr_reader is_playable: bool?

          def is_playable=: (bool) -> bool

          attr_reader linked_from: Spotted::Models::AlbumRetrieveResponse::Tracks::Item::LinkedFrom?

          def linked_from=: (
            Spotted::Models::AlbumRetrieveResponse::Tracks::Item::LinkedFrom
          ) -> Spotted::Models::AlbumRetrieveResponse::Tracks::Item::LinkedFrom

          attr_reader name: String?

          def name=: (String) -> String

          attr_accessor preview_url: String?

          attr_reader restrictions: Spotted::Models::AlbumRetrieveResponse::Tracks::Item::Restrictions?

          def restrictions=: (
            Spotted::Models::AlbumRetrieveResponse::Tracks::Item::Restrictions
          ) -> Spotted::Models::AlbumRetrieveResponse::Tracks::Item::Restrictions

          attr_reader track_number: Integer?

          def track_number=: (Integer) -> Integer

          attr_reader type: String?

          def type=: (String) -> String

          attr_reader uri: String?

          def uri=: (String) -> String

          def initialize: (
            ?id: String,
            ?artists: ::Array[Spotted::Models::AlbumRetrieveResponse::Tracks::Item::Artist],
            ?available_markets: ::Array[String],
            ?disc_number: Integer,
            ?duration_ms: Integer,
            ?explicit: bool,
            ?external_urls: Spotted::Models::AlbumRetrieveResponse::Tracks::Item::ExternalURLs,
            ?href: String,
            ?is_local: bool,
            ?is_playable: bool,
            ?linked_from: Spotted::Models::AlbumRetrieveResponse::Tracks::Item::LinkedFrom,
            ?name: String,
            ?preview_url: String?,
            ?restrictions: Spotted::Models::AlbumRetrieveResponse::Tracks::Item::Restrictions,
            ?track_number: Integer,
            ?type: String,
            ?uri: String
          ) -> void

          def to_hash: -> {
            id: String,
            artists: ::Array[Spotted::Models::AlbumRetrieveResponse::Tracks::Item::Artist],
            available_markets: ::Array[String],
            disc_number: Integer,
            duration_ms: Integer,
            explicit: bool,
            external_urls: Spotted::Models::AlbumRetrieveResponse::Tracks::Item::ExternalURLs,
            href: String,
            is_local: bool,
            is_playable: bool,
            linked_from: Spotted::Models::AlbumRetrieveResponse::Tracks::Item::LinkedFrom,
            name: String,
            preview_url: String?,
            restrictions: Spotted::Models::AlbumRetrieveResponse::Tracks::Item::Restrictions,
            track_number: Integer,
            type: String,
            uri: String
          }

          type artist =
            {
              id: String,
              external_urls: Spotted::Models::AlbumRetrieveResponse::Tracks::Item::Artist::ExternalURLs,
              href: String,
              name: String,
              type: Spotted::Models::AlbumRetrieveResponse::Tracks::Item::Artist::type_,
              uri: String
            }

          class Artist < Spotted::Internal::Type::BaseModel
            attr_reader id: String?

            def id=: (String) -> String

            attr_reader external_urls: Spotted::Models::AlbumRetrieveResponse::Tracks::Item::Artist::ExternalURLs?

            def external_urls=: (
              Spotted::Models::AlbumRetrieveResponse::Tracks::Item::Artist::ExternalURLs
            ) -> Spotted::Models::AlbumRetrieveResponse::Tracks::Item::Artist::ExternalURLs

            attr_reader href: String?

            def href=: (String) -> String

            attr_reader name: String?

            def name=: (String) -> String

            attr_reader type: Spotted::Models::AlbumRetrieveResponse::Tracks::Item::Artist::type_?

            def type=: (
              Spotted::Models::AlbumRetrieveResponse::Tracks::Item::Artist::type_
            ) -> Spotted::Models::AlbumRetrieveResponse::Tracks::Item::Artist::type_

            attr_reader uri: String?

            def uri=: (String) -> String

            def initialize: (
              ?id: String,
              ?external_urls: Spotted::Models::AlbumRetrieveResponse::Tracks::Item::Artist::ExternalURLs,
              ?href: String,
              ?name: String,
              ?type: Spotted::Models::AlbumRetrieveResponse::Tracks::Item::Artist::type_,
              ?uri: String
            ) -> void

            def to_hash: -> {
              id: String,
              external_urls: Spotted::Models::AlbumRetrieveResponse::Tracks::Item::Artist::ExternalURLs,
              href: String,
              name: String,
              type: Spotted::Models::AlbumRetrieveResponse::Tracks::Item::Artist::type_,
              uri: String
            }

            type external_urls = { spotify: String }

            class ExternalURLs < Spotted::Internal::Type::BaseModel
              attr_reader spotify: String?

              def spotify=: (String) -> String

              def initialize: (?spotify: String) -> void

              def to_hash: -> { spotify: String }
            end

            type type_ = :artist

            module Type
              extend Spotted::Internal::Type::Enum

              ARTIST: :artist

              def self?.values: -> ::Array[Spotted::Models::AlbumRetrieveResponse::Tracks::Item::Artist::type_]
            end
          end

          type external_urls = { spotify: String }

          class ExternalURLs < Spotted::Internal::Type::BaseModel
            attr_reader spotify: String?

            def spotify=: (String) -> String

            def initialize: (?spotify: String) -> void

            def to_hash: -> { spotify: String }
          end

          type linked_from =
            {
              id: String,
              external_urls: Spotted::Models::AlbumRetrieveResponse::Tracks::Item::LinkedFrom::ExternalURLs,
              href: String,
              type: String,
              uri: String
            }

          class LinkedFrom < Spotted::Internal::Type::BaseModel
            attr_reader id: String?

            def id=: (String) -> String

            attr_reader external_urls: Spotted::Models::AlbumRetrieveResponse::Tracks::Item::LinkedFrom::ExternalURLs?

            def external_urls=: (
              Spotted::Models::AlbumRetrieveResponse::Tracks::Item::LinkedFrom::ExternalURLs
            ) -> Spotted::Models::AlbumRetrieveResponse::Tracks::Item::LinkedFrom::ExternalURLs

            attr_reader href: String?

            def href=: (String) -> String

            attr_reader type: String?

            def type=: (String) -> String

            attr_reader uri: String?

            def uri=: (String) -> String

            def initialize: (
              ?id: String,
              ?external_urls: Spotted::Models::AlbumRetrieveResponse::Tracks::Item::LinkedFrom::ExternalURLs,
              ?href: String,
              ?type: String,
              ?uri: String
            ) -> void

            def to_hash: -> {
              id: String,
              external_urls: Spotted::Models::AlbumRetrieveResponse::Tracks::Item::LinkedFrom::ExternalURLs,
              href: String,
              type: String,
              uri: String
            }

            type external_urls = { spotify: String }

            class ExternalURLs < Spotted::Internal::Type::BaseModel
              attr_reader spotify: String?

              def spotify=: (String) -> String

              def initialize: (?spotify: String) -> void

              def to_hash: -> { spotify: String }
            end
          end

          type restrictions = { reason: String }

          class Restrictions < Spotted::Internal::Type::BaseModel
            attr_reader reason: String?

            def reason=: (String) -> String

            def initialize: (?reason: String) -> void

            def to_hash: -> { reason: String }
          end
        end
      end
    end
  end
end
