module Spotted
  module Models
    type artist_list_related_artists_response =
      {
        artists: ::Array[Spotted::Models::ArtistListRelatedArtistsResponse::Artist]
      }

    class ArtistListRelatedArtistsResponse < Spotted::Internal::Type::BaseModel
      attr_accessor artists: ::Array[Spotted::Models::ArtistListRelatedArtistsResponse::Artist]

      def initialize: (
        artists: ::Array[Spotted::Models::ArtistListRelatedArtistsResponse::Artist]
      ) -> void

      def to_hash: -> {
        artists: ::Array[Spotted::Models::ArtistListRelatedArtistsResponse::Artist]
      }

      type artist =
        {
          id: String,
          external_urls: Spotted::Models::ArtistListRelatedArtistsResponse::Artist::ExternalURLs,
          followers: Spotted::Models::ArtistListRelatedArtistsResponse::Artist::Followers,
          genres: ::Array[String],
          href: String,
          images: ::Array[Spotted::Models::ArtistListRelatedArtistsResponse::Artist::Image],
          name: String,
          popularity: Integer,
          type: Spotted::Models::ArtistListRelatedArtistsResponse::Artist::type_,
          uri: String
        }

      class Artist < Spotted::Internal::Type::BaseModel
        attr_reader id: String?

        def id=: (String) -> String

        attr_reader external_urls: Spotted::Models::ArtistListRelatedArtistsResponse::Artist::ExternalURLs?

        def external_urls=: (
          Spotted::Models::ArtistListRelatedArtistsResponse::Artist::ExternalURLs
        ) -> Spotted::Models::ArtistListRelatedArtistsResponse::Artist::ExternalURLs

        attr_reader followers: Spotted::Models::ArtistListRelatedArtistsResponse::Artist::Followers?

        def followers=: (
          Spotted::Models::ArtistListRelatedArtistsResponse::Artist::Followers
        ) -> Spotted::Models::ArtistListRelatedArtistsResponse::Artist::Followers

        attr_reader genres: ::Array[String]?

        def genres=: (::Array[String]) -> ::Array[String]

        attr_reader href: String?

        def href=: (String) -> String

        attr_reader images: ::Array[Spotted::Models::ArtistListRelatedArtistsResponse::Artist::Image]?

        def images=: (
          ::Array[Spotted::Models::ArtistListRelatedArtistsResponse::Artist::Image]
        ) -> ::Array[Spotted::Models::ArtistListRelatedArtistsResponse::Artist::Image]

        attr_reader name: String?

        def name=: (String) -> String

        attr_reader popularity: Integer?

        def popularity=: (Integer) -> Integer

        attr_reader type: Spotted::Models::ArtistListRelatedArtistsResponse::Artist::type_?

        def type=: (
          Spotted::Models::ArtistListRelatedArtistsResponse::Artist::type_
        ) -> Spotted::Models::ArtistListRelatedArtistsResponse::Artist::type_

        attr_reader uri: String?

        def uri=: (String) -> String

        def initialize: (
          ?id: String,
          ?external_urls: Spotted::Models::ArtistListRelatedArtistsResponse::Artist::ExternalURLs,
          ?followers: Spotted::Models::ArtistListRelatedArtistsResponse::Artist::Followers,
          ?genres: ::Array[String],
          ?href: String,
          ?images: ::Array[Spotted::Models::ArtistListRelatedArtistsResponse::Artist::Image],
          ?name: String,
          ?popularity: Integer,
          ?type: Spotted::Models::ArtistListRelatedArtistsResponse::Artist::type_,
          ?uri: String
        ) -> void

        def to_hash: -> {
          id: String,
          external_urls: Spotted::Models::ArtistListRelatedArtistsResponse::Artist::ExternalURLs,
          followers: Spotted::Models::ArtistListRelatedArtistsResponse::Artist::Followers,
          genres: ::Array[String],
          href: String,
          images: ::Array[Spotted::Models::ArtistListRelatedArtistsResponse::Artist::Image],
          name: String,
          popularity: Integer,
          type: Spotted::Models::ArtistListRelatedArtistsResponse::Artist::type_,
          uri: String
        }

        type external_urls = { spotify: String }

        class ExternalURLs < Spotted::Internal::Type::BaseModel
          attr_reader spotify: String?

          def spotify=: (String) -> String

          def initialize: (?spotify: String) -> void

          def to_hash: -> { spotify: String }
        end

        type followers = { href: String?, total: Integer }

        class Followers < Spotted::Internal::Type::BaseModel
          attr_accessor href: String?

          attr_reader total: Integer?

          def total=: (Integer) -> Integer

          def initialize: (?href: String?, ?total: Integer) -> void

          def to_hash: -> { href: String?, total: Integer }
        end

        type image = { height: Integer?, url: String, width: Integer? }

        class Image < Spotted::Internal::Type::BaseModel
          attr_accessor height: Integer?

          attr_accessor url: String

          attr_accessor width: Integer?

          def initialize: (
            height: Integer?,
            url: String,
            width: Integer?
          ) -> void

          def to_hash: -> { height: Integer?, url: String, width: Integer? }
        end

        type type_ = :artist

        module Type
          extend Spotted::Internal::Type::Enum

          ARTIST: :artist

          def self?.values: -> ::Array[Spotted::Models::ArtistListRelatedArtistsResponse::Artist::type_]
        end
      end
    end
  end
end
