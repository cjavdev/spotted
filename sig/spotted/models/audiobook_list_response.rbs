module Spotted
  module Models
    type audiobook_list_response =
      { audiobooks: ::Array[Spotted::Models::AudiobookListResponse::Audiobook] }

    class AudiobookListResponse < Spotted::Internal::Type::BaseModel
      attr_accessor audiobooks: ::Array[Spotted::Models::AudiobookListResponse::Audiobook]

      def initialize: (
        audiobooks: ::Array[Spotted::Models::AudiobookListResponse::Audiobook]
      ) -> void

      def to_hash: -> {
        audiobooks: ::Array[Spotted::Models::AudiobookListResponse::Audiobook]
      }

      type audiobook =
        {
          chapters: Spotted::Models::AudiobookListResponse::Audiobook::Chapters
        }

      class Audiobook < Spotted::Models::AudiobookBase
        def chapters: -> Spotted::Models::AudiobookListResponse::Audiobook::Chapters

        def chapters=: (
          Spotted::Models::AudiobookListResponse::Audiobook::Chapters _
        ) -> Spotted::Models::AudiobookListResponse::Audiobook::Chapters

        def initialize: (
          chapters: Spotted::Models::AudiobookListResponse::Audiobook::Chapters
        ) -> void

        def to_hash: -> {
          chapters: Spotted::Models::AudiobookListResponse::Audiobook::Chapters
        }

        type chapters =
          {
            href: String,
            items: ::Array[Spotted::SimplifiedChapterObject],
            limit: Integer,
            next_: String?,
            offset: Integer,
            previous: String?,
            total: Integer
          }

        class Chapters < Spotted::Internal::Type::BaseModel
          attr_accessor href: String

          attr_accessor items: ::Array[Spotted::SimplifiedChapterObject]

          attr_accessor limit: Integer

          attr_accessor next_: String?

          attr_accessor offset: Integer

          attr_accessor previous: String?

          attr_accessor total: Integer

          def initialize: (
            href: String,
            items: ::Array[Spotted::SimplifiedChapterObject],
            limit: Integer,
            next_: String?,
            offset: Integer,
            previous: String?,
            total: Integer
          ) -> void

          def to_hash: -> {
            href: String,
            items: ::Array[Spotted::SimplifiedChapterObject],
            limit: Integer,
            next_: String?,
            offset: Integer,
            previous: String?,
            total: Integer
          }
        end
      end
    end
  end
end
